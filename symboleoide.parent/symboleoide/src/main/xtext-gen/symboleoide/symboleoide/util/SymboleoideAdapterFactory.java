/**
 * generated by Xtext 2.22.0
 */
package symboleoide.symboleoide.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import symboleoide.symboleoide.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see symboleoide.symboleoide.SymboleoidePackage
 * @generated
 */
public class SymboleoideAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SymboleoidePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SymboleoideAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SymboleoidePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SymboleoideSwitch<Adapter> modelSwitch =
    new SymboleoideSwitch<Adapter>()
    {
      @Override
      public Adapter caseContractSpec(ContractSpec object)
      {
        return createContractSpecAdapter();
      }
      @Override
      public Adapter caseDomainSpec(DomainSpec object)
      {
        return createDomainSpecAdapter();
      }
      @Override
      public Adapter caseDConcept(DConcept object)
      {
        return createDConceptAdapter();
      }
      @Override
      public Adapter caseenumItem(enumItem object)
      {
        return createenumItemAdapter();
      }
      @Override
      public Adapter caseCType(CType object)
      {
        return createCTypeAdapter();
      }
      @Override
      public Adapter caseDomainType(DomainType object)
      {
        return createDomainTypeAdapter();
      }
      @Override
      public Adapter caseContract(Contract object)
      {
        return createContractAdapter();
      }
      @Override
      public Adapter caseAtt(Att object)
      {
        return createAttAdapter();
      }
      @Override
      public Adapter caseParam(Param object)
      {
        return createParamAdapter();
      }
      @Override
      public Adapter caseDeclar(Declar object)
      {
        return createDeclarAdapter();
      }
      @Override
      public Adapter caseDeclarPair(DeclarPair object)
      {
        return createDeclarPairAdapter();
      }
      @Override
      public Adapter casePair(Pair object)
      {
        return createPairAdapter();
      }
      @Override
      public Adapter caseTypeName(TypeName object)
      {
        return createTypeNameAdapter();
      }
      @Override
      public Adapter caseObl(Obl object)
      {
        return createOblAdapter();
      }
      @Override
      public Adapter caseProp(Prop object)
      {
        return createPropAdapter();
      }
      @Override
      public Adapter caseJunc(Junc object)
      {
        return createJuncAdapter();
      }
      @Override
      public Adapter caseNeg(Neg object)
      {
        return createNegAdapter();
      }
      @Override
      public Adapter caseAtom(Atom object)
      {
        return createAtomAdapter();
      }
      @Override
      public Adapter caseSitProp(SitProp object)
      {
        return createSitPropAdapter();
      }
      @Override
      public Adapter caseEventProp(EventProp object)
      {
        return createEventPropAdapter();
      }
      @Override
      public Adapter caseInterval(Interval object)
      {
        return createIntervalAdapter();
      }
      @Override
      public Adapter caseSitName(SitName object)
      {
        return createSitNameAdapter();
      }
      @Override
      public Adapter caseIntConst(IntConst object)
      {
        return createIntConstAdapter();
      }
      @Override
      public Adapter casePoint(Point object)
      {
        return createPointAdapter();
      }
      @Override
      public Adapter caseName(Name object)
      {
        return createNameAdapter();
      }
      @Override
      public Adapter casepEvent(pEvent object)
      {
        return createpEventAdapter();
      }
      @Override
      public Adapter casecEvent(cEvent object)
      {
        return createcEventAdapter();
      }
      @Override
      public Adapter caseoEvent(oEvent object)
      {
        return createoEventAdapter();
      }
      @Override
      public Adapter casePointConst(PointConst object)
      {
        return createPointConstAdapter();
      }
      @Override
      public Adapter caseoState(oState object)
      {
        return createoStateAdapter();
      }
      @Override
      public Adapter casecState(cState object)
      {
        return createcStateAdapter();
      }
      @Override
      public Adapter casePow(Pow object)
      {
        return createPowAdapter();
      }
      @Override
      public Adapter casepState(pState object)
      {
        return createpStateAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.ContractSpec <em>Contract Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.ContractSpec
   * @generated
   */
  public Adapter createContractSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.DomainSpec <em>Domain Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.DomainSpec
   * @generated
   */
  public Adapter createDomainSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.DConcept <em>DConcept</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.DConcept
   * @generated
   */
  public Adapter createDConceptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.enumItem <em>enum Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.enumItem
   * @generated
   */
  public Adapter createenumItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.CType <em>CType</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.CType
   * @generated
   */
  public Adapter createCTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.DomainType <em>Domain Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.DomainType
   * @generated
   */
  public Adapter createDomainTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Contract <em>Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Contract
   * @generated
   */
  public Adapter createContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Att <em>Att</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Att
   * @generated
   */
  public Adapter createAttAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Param <em>Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Param
   * @generated
   */
  public Adapter createParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Declar <em>Declar</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Declar
   * @generated
   */
  public Adapter createDeclarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.DeclarPair <em>Declar Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.DeclarPair
   * @generated
   */
  public Adapter createDeclarPairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Pair <em>Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Pair
   * @generated
   */
  public Adapter createPairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.TypeName <em>Type Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.TypeName
   * @generated
   */
  public Adapter createTypeNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Obl <em>Obl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Obl
   * @generated
   */
  public Adapter createOblAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Prop <em>Prop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Prop
   * @generated
   */
  public Adapter createPropAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Junc <em>Junc</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Junc
   * @generated
   */
  public Adapter createJuncAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Neg <em>Neg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Neg
   * @generated
   */
  public Adapter createNegAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Atom <em>Atom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Atom
   * @generated
   */
  public Adapter createAtomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.SitProp <em>Sit Prop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.SitProp
   * @generated
   */
  public Adapter createSitPropAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.EventProp <em>Event Prop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.EventProp
   * @generated
   */
  public Adapter createEventPropAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Interval <em>Interval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Interval
   * @generated
   */
  public Adapter createIntervalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.SitName <em>Sit Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.SitName
   * @generated
   */
  public Adapter createSitNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.IntConst <em>Int Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.IntConst
   * @generated
   */
  public Adapter createIntConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Point <em>Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Point
   * @generated
   */
  public Adapter createPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Name <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Name
   * @generated
   */
  public Adapter createNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.pEvent <em>pEvent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.pEvent
   * @generated
   */
  public Adapter createpEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.cEvent <em>cEvent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.cEvent
   * @generated
   */
  public Adapter createcEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.oEvent <em>oEvent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.oEvent
   * @generated
   */
  public Adapter createoEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.PointConst <em>Point Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.PointConst
   * @generated
   */
  public Adapter createPointConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.oState <em>oState</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.oState
   * @generated
   */
  public Adapter createoStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.cState <em>cState</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.cState
   * @generated
   */
  public Adapter createcStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.Pow <em>Pow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.Pow
   * @generated
   */
  public Adapter createPowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link symboleoide.symboleoide.pState <em>pState</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see symboleoide.symboleoide.pState
   * @generated
   */
  public Adapter createpStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SymboleoideAdapterFactory
