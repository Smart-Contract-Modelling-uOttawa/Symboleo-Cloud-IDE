/**
 * generated by Xtext 2.22.0
 */
package symboleoide.symboleoide.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import symboleoide.symboleoide.Name;
import symboleoide.symboleoide.Pow;
import symboleoide.symboleoide.Prop;
import symboleoide.symboleoide.SymboleoidePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pow</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link symboleoide.symboleoide.impl.PowImpl#getName <em>Name</em>}</li>
 *   <li>{@link symboleoide.symboleoide.impl.PowImpl#getTrigger <em>Trigger</em>}</li>
 *   <li>{@link symboleoide.symboleoide.impl.PowImpl#getRoles <em>Roles</em>}</li>
 *   <li>{@link symboleoide.symboleoide.impl.PowImpl#getAntecedents <em>Antecedents</em>}</li>
 *   <li>{@link symboleoide.symboleoide.impl.PowImpl#getConsequents <em>Consequents</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PowImpl extends MinimalEObjectImpl.Container implements Pow
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTrigger() <em>Trigger</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrigger()
   * @generated
   * @ordered
   */
  protected Prop trigger;

  /**
   * The cached value of the '{@link #getRoles() <em>Roles</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoles()
   * @generated
   * @ordered
   */
  protected EList<Name> roles;

  /**
   * The cached value of the '{@link #getAntecedents() <em>Antecedents</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAntecedents()
   * @generated
   * @ordered
   */
  protected EList<Prop> antecedents;

  /**
   * The cached value of the '{@link #getConsequents() <em>Consequents</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsequents()
   * @generated
   * @ordered
   */
  protected EList<Prop> consequents;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PowImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SymboleoidePackage.Literals.POW;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoidePackage.POW__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Prop getTrigger()
  {
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTrigger(Prop newTrigger, NotificationChain msgs)
  {
    Prop oldTrigger = trigger;
    trigger = newTrigger;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SymboleoidePackage.POW__TRIGGER, oldTrigger, newTrigger);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTrigger(Prop newTrigger)
  {
    if (newTrigger != trigger)
    {
      NotificationChain msgs = null;
      if (trigger != null)
        msgs = ((InternalEObject)trigger).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SymboleoidePackage.POW__TRIGGER, null, msgs);
      if (newTrigger != null)
        msgs = ((InternalEObject)newTrigger).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SymboleoidePackage.POW__TRIGGER, null, msgs);
      msgs = basicSetTrigger(newTrigger, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoidePackage.POW__TRIGGER, newTrigger, newTrigger));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Name> getRoles()
  {
    if (roles == null)
    {
      roles = new EObjectContainmentEList<Name>(Name.class, this, SymboleoidePackage.POW__ROLES);
    }
    return roles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Prop> getAntecedents()
  {
    if (antecedents == null)
    {
      antecedents = new EObjectContainmentEList<Prop>(Prop.class, this, SymboleoidePackage.POW__ANTECEDENTS);
    }
    return antecedents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Prop> getConsequents()
  {
    if (consequents == null)
    {
      consequents = new EObjectContainmentEList<Prop>(Prop.class, this, SymboleoidePackage.POW__CONSEQUENTS);
    }
    return consequents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SymboleoidePackage.POW__TRIGGER:
        return basicSetTrigger(null, msgs);
      case SymboleoidePackage.POW__ROLES:
        return ((InternalEList<?>)getRoles()).basicRemove(otherEnd, msgs);
      case SymboleoidePackage.POW__ANTECEDENTS:
        return ((InternalEList<?>)getAntecedents()).basicRemove(otherEnd, msgs);
      case SymboleoidePackage.POW__CONSEQUENTS:
        return ((InternalEList<?>)getConsequents()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SymboleoidePackage.POW__NAME:
        return getName();
      case SymboleoidePackage.POW__TRIGGER:
        return getTrigger();
      case SymboleoidePackage.POW__ROLES:
        return getRoles();
      case SymboleoidePackage.POW__ANTECEDENTS:
        return getAntecedents();
      case SymboleoidePackage.POW__CONSEQUENTS:
        return getConsequents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SymboleoidePackage.POW__NAME:
        setName((String)newValue);
        return;
      case SymboleoidePackage.POW__TRIGGER:
        setTrigger((Prop)newValue);
        return;
      case SymboleoidePackage.POW__ROLES:
        getRoles().clear();
        getRoles().addAll((Collection<? extends Name>)newValue);
        return;
      case SymboleoidePackage.POW__ANTECEDENTS:
        getAntecedents().clear();
        getAntecedents().addAll((Collection<? extends Prop>)newValue);
        return;
      case SymboleoidePackage.POW__CONSEQUENTS:
        getConsequents().clear();
        getConsequents().addAll((Collection<? extends Prop>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SymboleoidePackage.POW__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SymboleoidePackage.POW__TRIGGER:
        setTrigger((Prop)null);
        return;
      case SymboleoidePackage.POW__ROLES:
        getRoles().clear();
        return;
      case SymboleoidePackage.POW__ANTECEDENTS:
        getAntecedents().clear();
        return;
      case SymboleoidePackage.POW__CONSEQUENTS:
        getConsequents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SymboleoidePackage.POW__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SymboleoidePackage.POW__TRIGGER:
        return trigger != null;
      case SymboleoidePackage.POW__ROLES:
        return roles != null && !roles.isEmpty();
      case SymboleoidePackage.POW__ANTECEDENTS:
        return antecedents != null && !antecedents.isEmpty();
      case SymboleoidePackage.POW__CONSEQUENTS:
        return consequents != null && !consequents.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //PowImpl
