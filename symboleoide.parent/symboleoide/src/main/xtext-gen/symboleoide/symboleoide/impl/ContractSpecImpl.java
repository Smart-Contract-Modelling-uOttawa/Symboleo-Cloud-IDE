/**
 * generated by Xtext 2.22.0
 */
package symboleoide.symboleoide.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import symboleoide.symboleoide.Contract;
import symboleoide.symboleoide.ContractSpec;
import symboleoide.symboleoide.DomainSpec;
import symboleoide.symboleoide.SymboleoidePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Contract Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link symboleoide.symboleoide.impl.ContractSpecImpl#getDomainSpecs <em>Domain Specs</em>}</li>
 *   <li>{@link symboleoide.symboleoide.impl.ContractSpecImpl#getContracts <em>Contracts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContractSpecImpl extends MinimalEObjectImpl.Container implements ContractSpec
{
  /**
   * The cached value of the '{@link #getDomainSpecs() <em>Domain Specs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainSpecs()
   * @generated
   * @ordered
   */
  protected EList<DomainSpec> domainSpecs;

  /**
   * The cached value of the '{@link #getContracts() <em>Contracts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContracts()
   * @generated
   * @ordered
   */
  protected EList<Contract> contracts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContractSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SymboleoidePackage.Literals.CONTRACT_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DomainSpec> getDomainSpecs()
  {
    if (domainSpecs == null)
    {
      domainSpecs = new EObjectContainmentEList<DomainSpec>(DomainSpec.class, this, SymboleoidePackage.CONTRACT_SPEC__DOMAIN_SPECS);
    }
    return domainSpecs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Contract> getContracts()
  {
    if (contracts == null)
    {
      contracts = new EObjectContainmentEList<Contract>(Contract.class, this, SymboleoidePackage.CONTRACT_SPEC__CONTRACTS);
    }
    return contracts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SymboleoidePackage.CONTRACT_SPEC__DOMAIN_SPECS:
        return ((InternalEList<?>)getDomainSpecs()).basicRemove(otherEnd, msgs);
      case SymboleoidePackage.CONTRACT_SPEC__CONTRACTS:
        return ((InternalEList<?>)getContracts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SymboleoidePackage.CONTRACT_SPEC__DOMAIN_SPECS:
        return getDomainSpecs();
      case SymboleoidePackage.CONTRACT_SPEC__CONTRACTS:
        return getContracts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SymboleoidePackage.CONTRACT_SPEC__DOMAIN_SPECS:
        getDomainSpecs().clear();
        getDomainSpecs().addAll((Collection<? extends DomainSpec>)newValue);
        return;
      case SymboleoidePackage.CONTRACT_SPEC__CONTRACTS:
        getContracts().clear();
        getContracts().addAll((Collection<? extends Contract>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SymboleoidePackage.CONTRACT_SPEC__DOMAIN_SPECS:
        getDomainSpecs().clear();
        return;
      case SymboleoidePackage.CONTRACT_SPEC__CONTRACTS:
        getContracts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SymboleoidePackage.CONTRACT_SPEC__DOMAIN_SPECS:
        return domainSpecs != null && !domainSpecs.isEmpty();
      case SymboleoidePackage.CONTRACT_SPEC__CONTRACTS:
        return contracts != null && !contracts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ContractSpecImpl
