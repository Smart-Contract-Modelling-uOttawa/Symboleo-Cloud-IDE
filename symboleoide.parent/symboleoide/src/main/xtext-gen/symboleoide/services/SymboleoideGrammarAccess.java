/*
 * generated by Xtext 2.22.0
 */
package symboleoide.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SymboleoideGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ContractSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.ContractSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDomainSpecsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDomainSpecsDomainSpecParserRuleCall_0_0 = (RuleCall)cDomainSpecsAssignment_0.eContents().get(0);
		private final Assignment cContractsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContractsContractParserRuleCall_1_0 = (RuleCall)cContractsAssignment_1.eContents().get(0);
		
		//ContractSpec:
		//	domainSpecs+=DomainSpec contracts+=Contract;
		@Override public ParserRule getRule() { return rule; }
		
		//domainSpecs+=DomainSpec contracts+=Contract
		public Group getGroup() { return cGroup; }
		
		//domainSpecs+=DomainSpec
		public Assignment getDomainSpecsAssignment_0() { return cDomainSpecsAssignment_0; }
		
		//DomainSpec
		public RuleCall getDomainSpecsDomainSpecParserRuleCall_0_0() { return cDomainSpecsDomainSpecParserRuleCall_0_0; }
		
		//contracts+=Contract
		public Assignment getContractsAssignment_1() { return cContractsAssignment_1; }
		
		//Contract
		public RuleCall getContractsContractParserRuleCall_1_0() { return cContractsContractParserRuleCall_1_0; }
	}
	public class DomainSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.DomainSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDConceptsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDConceptsDConceptParserRuleCall_2_0_0 = (RuleCall)cDConceptsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCtypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCtypesCTypeParserRuleCall_3_0 = (RuleCall)cCtypesAssignment_3.eContents().get(0);
		private final Keyword cEndDomainKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DomainSpec:
		//	'Domain' name=ID (dConcepts+=DConcept ';')+ ctypes+=CType? 'endDomain';
		@Override public ParserRule getRule() { return rule; }
		
		//'Domain' name=ID (dConcepts+=DConcept ';')+ ctypes+=CType? 'endDomain'
		public Group getGroup() { return cGroup; }
		
		//'Domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(dConcepts+=DConcept ';')+
		public Group getGroup_2() { return cGroup_2; }
		
		//dConcepts+=DConcept
		public Assignment getDConceptsAssignment_2_0() { return cDConceptsAssignment_2_0; }
		
		//DConcept
		public RuleCall getDConceptsDConceptParserRuleCall_2_0_0() { return cDConceptsDConceptParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//ctypes+=CType?
		public Assignment getCtypesAssignment_3() { return cCtypesAssignment_3; }
		
		//CType
		public RuleCall getCtypesCTypeParserRuleCall_3_0() { return cCtypesCTypeParserRuleCall_3_0; }
		
		//'endDomain'
		public Keyword getEndDomainKeyword_4() { return cEndDomainKeyword_4; }
	}
	public class DConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.DConcept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cIsAKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cConceptTypesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cConceptTypesCTypeParserRuleCall_0_1_1_0 = (RuleCall)cConceptTypesAssignment_0_1_1.eContents().get(0);
		private final Keyword cWithKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cAttributesAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cAttributesAttParserRuleCall_0_3_0_0 = (RuleCall)cAttributesAssignment_0_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cAttributesAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cAttributesAttParserRuleCall_0_4_0 = (RuleCall)cAttributesAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cIsAKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEnumerationKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cEnumerationItemsAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cEnumerationItemsEnumItemParserRuleCall_1_4_0_0 = (RuleCall)cEnumerationItemsAssignment_1_4_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cEnumerationItemsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cEnumerationItemsEnumItemParserRuleCall_1_5_0 = (RuleCall)cEnumerationItemsAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//DConcept:
		//	name=ID ('isA' conceptTypes+=CType) 'with'? (attributes+=Att ',')* attributes+=Att?
		//	| name=ID 'isA' 'Enumeration' '(' (enumerationItems+=enumItem ',')* enumerationItems+=enumItem ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('isA' conceptTypes+=CType) 'with'? (attributes+=Att ',')* attributes+=Att? | name=ID 'isA' 'Enumeration' '('
		//(enumerationItems+=enumItem ',')* enumerationItems+=enumItem ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID ('isA' conceptTypes+=CType) 'with'? (attributes+=Att ',')* attributes+=Att?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//('isA' conceptTypes+=CType)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'isA'
		public Keyword getIsAKeyword_0_1_0() { return cIsAKeyword_0_1_0; }
		
		//conceptTypes+=CType
		public Assignment getConceptTypesAssignment_0_1_1() { return cConceptTypesAssignment_0_1_1; }
		
		//CType
		public RuleCall getConceptTypesCTypeParserRuleCall_0_1_1_0() { return cConceptTypesCTypeParserRuleCall_0_1_1_0; }
		
		//'with'?
		public Keyword getWithKeyword_0_2() { return cWithKeyword_0_2; }
		
		//(attributes+=Att ',')*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//attributes+=Att
		public Assignment getAttributesAssignment_0_3_0() { return cAttributesAssignment_0_3_0; }
		
		//Att
		public RuleCall getAttributesAttParserRuleCall_0_3_0_0() { return cAttributesAttParserRuleCall_0_3_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_3_1() { return cCommaKeyword_0_3_1; }
		
		//attributes+=Att?
		public Assignment getAttributesAssignment_0_4() { return cAttributesAssignment_0_4; }
		
		//Att
		public RuleCall getAttributesAttParserRuleCall_0_4_0() { return cAttributesAttParserRuleCall_0_4_0; }
		
		//name=ID 'isA' 'Enumeration' '(' (enumerationItems+=enumItem ',')* enumerationItems+=enumItem ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'isA'
		public Keyword getIsAKeyword_1_1() { return cIsAKeyword_1_1; }
		
		//'Enumeration'
		public Keyword getEnumerationKeyword_1_2() { return cEnumerationKeyword_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//(enumerationItems+=enumItem ',')*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//enumerationItems+=enumItem
		public Assignment getEnumerationItemsAssignment_1_4_0() { return cEnumerationItemsAssignment_1_4_0; }
		
		//enumItem
		public RuleCall getEnumerationItemsEnumItemParserRuleCall_1_4_0_0() { return cEnumerationItemsEnumItemParserRuleCall_1_4_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_4_1() { return cCommaKeyword_1_4_1; }
		
		//enumerationItems+=enumItem
		public Assignment getEnumerationItemsAssignment_1_5() { return cEnumerationItemsAssignment_1_5; }
		
		//enumItem
		public RuleCall getEnumerationItemsEnumItemParserRuleCall_1_5_0() { return cEnumerationItemsEnumItemParserRuleCall_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
	}
	public class EnumItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.enumItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumItemAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//enumItem:
		//	{enumItem} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{enumItem} name=ID
		public Group getGroup() { return cGroup; }
		
		//{enumItem}
		public Action getEnumItemAction_0() { return cEnumItemAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.CType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDomainTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOntoCTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cBasicTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//CType:
		//	DomainType | {CType} OntoCType | {CType} BasicType;
		@Override public ParserRule getRule() { return rule; }
		
		//DomainType | {CType} OntoCType | {CType} BasicType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DomainType
		public RuleCall getDomainTypeParserRuleCall_0() { return cDomainTypeParserRuleCall_0; }
		
		//{CType} OntoCType
		public Group getGroup_1() { return cGroup_1; }
		
		//{CType}
		public Action getCTypeAction_1_0() { return cCTypeAction_1_0; }
		
		//OntoCType
		public RuleCall getOntoCTypeParserRuleCall_1_1() { return cOntoCTypeParserRuleCall_1_1; }
		
		//{CType} BasicType
		public Group getGroup_2() { return cGroup_2; }
		
		//{CType}
		public Action getCTypeAction_2_0() { return cCTypeAction_2_0; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_2_1() { return cBasicTypeParserRuleCall_2_1; }
	}
	public class DomainTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.DomainType");
		private final Assignment cDtypesAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cDtypesDConceptCrossReference_0 = (CrossReference)cDtypesAssignment.eContents().get(0);
		private final RuleCall cDtypesDConceptIDTerminalRuleCall_0_1 = (RuleCall)cDtypesDConceptCrossReference_0.eContents().get(1);
		
		//DomainType:
		//	dtypes+=[DConcept];
		@Override public ParserRule getRule() { return rule; }
		
		//dtypes+=[DConcept]
		public Assignment getDtypesAssignment() { return cDtypesAssignment; }
		
		//[DConcept]
		public CrossReference getDtypesDConceptCrossReference_0() { return cDtypesDConceptCrossReference_0; }
		
		//ID
		public RuleCall getDtypesDConceptIDTerminalRuleCall_0_1() { return cDtypesDConceptIDTerminalRuleCall_0_1; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNUMBERKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDATEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BasicType:
		//	'NUMBER' | 'STRING' | 'DATE';
		@Override public ParserRule getRule() { return rule; }
		
		//'NUMBER' | 'STRING' | 'DATE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NUMBER'
		public Keyword getNUMBERKeyword_0() { return cNUMBERKeyword_0; }
		
		//'STRING'
		public Keyword getSTRINGKeyword_1() { return cSTRINGKeyword_1; }
		
		//'DATE'
		public Keyword getDATEKeyword_2() { return cDATEKeyword_2; }
	}
	public class OntoCTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.OntoCType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cASSETKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEVENTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cROLEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSITUATIONKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCONTRACTKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//OntoCType:
		//	'ASSET' | 'EVENT' | 'ROLE' | 'SITUATION' | 'CONTRACT';
		@Override public ParserRule getRule() { return rule; }
		
		//'ASSET' | 'EVENT' | 'ROLE' | 'SITUATION' | 'CONTRACT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ASSET'
		public Keyword getASSETKeyword_0() { return cASSETKeyword_0; }
		
		//'EVENT'
		public Keyword getEVENTKeyword_1() { return cEVENTKeyword_1; }
		
		//'ROLE'
		public Keyword getROLEKeyword_2() { return cROLEKeyword_2; }
		
		//'SITUATION'
		public Keyword getSITUATIONKeyword_3() { return cSITUATIONKeyword_3; }
		
		//'CONTRACT'
		public Keyword getCONTRACTKeyword_4() { return cCONTRACTKeyword_4; }
	}
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParamParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersParamParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDeclarationsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cDeclarationsAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cDeclarationsDeclarParserRuleCall_6_1_0_0 = (RuleCall)cDeclarationsAssignment_6_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cPreconditionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Assignment cPropositionsAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final RuleCall cPropositionsPropParserRuleCall_7_1_0_0 = (RuleCall)cPropositionsAssignment_7_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1_1 = (Keyword)cGroup_7_1.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cPostconditionsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Assignment cPropositionsAssignment_8_1_0 = (Assignment)cGroup_8_1.eContents().get(0);
		private final RuleCall cPropositionsPropParserRuleCall_8_1_0_0 = (RuleCall)cPropositionsAssignment_8_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1_1 = (Keyword)cGroup_8_1.eContents().get(1);
		private final Keyword cObligationsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cObligationsAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cObligationsOblParserRuleCall_10_0_0 = (RuleCall)cObligationsAssignment_10_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cSurvivingOblsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Assignment cObligationsAssignment_11_1_0 = (Assignment)cGroup_11_1.eContents().get(0);
		private final RuleCall cObligationsOblParserRuleCall_11_1_0_0 = (RuleCall)cObligationsAssignment_11_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1_1 = (Keyword)cGroup_11_1.eContents().get(1);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cPowersKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final Assignment cPowersAssignment_12_1_0 = (Assignment)cGroup_12_1.eContents().get(0);
		private final RuleCall cPowersPowParserRuleCall_12_1_0_0 = (RuleCall)cPowersAssignment_12_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_1_1 = (Keyword)cGroup_12_1.eContents().get(1);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cConstraintsKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Group cGroup_13_1 = (Group)cGroup_13.eContents().get(1);
		private final Assignment cPropositionsAssignment_13_1_0 = (Assignment)cGroup_13_1.eContents().get(0);
		private final RuleCall cPropositionsPropParserRuleCall_13_1_0_0 = (RuleCall)cPropositionsAssignment_13_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_1_1 = (Keyword)cGroup_13_1.eContents().get(1);
		private final Keyword cEndContractKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Contract:
		//	'Contract' name=ID '(' (parameters+=Param ',')+ parameters+=Param ')' ('Declarations' (declarations+=Declar ';')*)?
		//	('Preconditions' (propositions+=Prop ';')*)? ('Postconditions' (propositions+=Prop ';')*)?
		//	'Obligations' (obligations+=Obl ';')+ ('SurvivingObls' (obligations+=Obl ';')*)? ('Powers' (powers+=Pow ';')*)?
		//	('Constraints' (propositions+=Prop ';')*)?
		//	'endContract';
		@Override public ParserRule getRule() { return rule; }
		
		//'Contract' name=ID '(' (parameters+=Param ',')+ parameters+=Param ')' ('Declarations' (declarations+=Declar ';')*)?
		//('Preconditions' (propositions+=Prop ';')*)? ('Postconditions' (propositions+=Prop ';')*)? 'Obligations'
		//(obligations+=Obl ';')+ ('SurvivingObls' (obligations+=Obl ';')*)? ('Powers' (powers+=Pow ';')*)? ('Constraints'
		//(propositions+=Prop ';')*)? 'endContract'
		public Group getGroup() { return cGroup; }
		
		//'Contract'
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Param ',')+
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Param
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Param
		public RuleCall getParametersParamParserRuleCall_3_0_0() { return cParametersParamParserRuleCall_3_0_0; }
		
		//','
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
		
		//parameters+=Param
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }
		
		//Param
		public RuleCall getParametersParamParserRuleCall_4_0() { return cParametersParamParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('Declarations' (declarations+=Declar ';')*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'Declarations'
		public Keyword getDeclarationsKeyword_6_0() { return cDeclarationsKeyword_6_0; }
		
		//(declarations+=Declar ';')*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//declarations+=Declar
		public Assignment getDeclarationsAssignment_6_1_0() { return cDeclarationsAssignment_6_1_0; }
		
		//Declar
		public RuleCall getDeclarationsDeclarParserRuleCall_6_1_0_0() { return cDeclarationsDeclarParserRuleCall_6_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_1_1() { return cSemicolonKeyword_6_1_1; }
		
		//('Preconditions' (propositions+=Prop ';')*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'Preconditions'
		public Keyword getPreconditionsKeyword_7_0() { return cPreconditionsKeyword_7_0; }
		
		//(propositions+=Prop ';')*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//propositions+=Prop
		public Assignment getPropositionsAssignment_7_1_0() { return cPropositionsAssignment_7_1_0; }
		
		//Prop
		public RuleCall getPropositionsPropParserRuleCall_7_1_0_0() { return cPropositionsPropParserRuleCall_7_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7_1_1() { return cSemicolonKeyword_7_1_1; }
		
		//('Postconditions' (propositions+=Prop ';')*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'Postconditions'
		public Keyword getPostconditionsKeyword_8_0() { return cPostconditionsKeyword_8_0; }
		
		//(propositions+=Prop ';')*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//propositions+=Prop
		public Assignment getPropositionsAssignment_8_1_0() { return cPropositionsAssignment_8_1_0; }
		
		//Prop
		public RuleCall getPropositionsPropParserRuleCall_8_1_0_0() { return cPropositionsPropParserRuleCall_8_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1_1() { return cSemicolonKeyword_8_1_1; }
		
		//'Obligations'
		public Keyword getObligationsKeyword_9() { return cObligationsKeyword_9; }
		
		//(obligations+=Obl ';')+
		public Group getGroup_10() { return cGroup_10; }
		
		//obligations+=Obl
		public Assignment getObligationsAssignment_10_0() { return cObligationsAssignment_10_0; }
		
		//Obl
		public RuleCall getObligationsOblParserRuleCall_10_0_0() { return cObligationsOblParserRuleCall_10_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10_1() { return cSemicolonKeyword_10_1; }
		
		//('SurvivingObls' (obligations+=Obl ';')*)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'SurvivingObls'
		public Keyword getSurvivingOblsKeyword_11_0() { return cSurvivingOblsKeyword_11_0; }
		
		//(obligations+=Obl ';')*
		public Group getGroup_11_1() { return cGroup_11_1; }
		
		//obligations+=Obl
		public Assignment getObligationsAssignment_11_1_0() { return cObligationsAssignment_11_1_0; }
		
		//Obl
		public RuleCall getObligationsOblParserRuleCall_11_1_0_0() { return cObligationsOblParserRuleCall_11_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11_1_1() { return cSemicolonKeyword_11_1_1; }
		
		//('Powers' (powers+=Pow ';')*)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'Powers'
		public Keyword getPowersKeyword_12_0() { return cPowersKeyword_12_0; }
		
		//(powers+=Pow ';')*
		public Group getGroup_12_1() { return cGroup_12_1; }
		
		//powers+=Pow
		public Assignment getPowersAssignment_12_1_0() { return cPowersAssignment_12_1_0; }
		
		//Pow
		public RuleCall getPowersPowParserRuleCall_12_1_0_0() { return cPowersPowParserRuleCall_12_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_12_1_1() { return cSemicolonKeyword_12_1_1; }
		
		//('Constraints' (propositions+=Prop ';')*)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'Constraints'
		public Keyword getConstraintsKeyword_13_0() { return cConstraintsKeyword_13_0; }
		
		//(propositions+=Prop ';')*
		public Group getGroup_13_1() { return cGroup_13_1; }
		
		//propositions+=Prop
		public Assignment getPropositionsAssignment_13_1_0() { return cPropositionsAssignment_13_1_0; }
		
		//Prop
		public RuleCall getPropositionsPropParserRuleCall_13_1_0_0() { return cPropositionsPropParserRuleCall_13_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_13_1_1() { return cSemicolonKeyword_13_1_1; }
		
		//'endContract'
		public Keyword getEndContractKeyword_14() { return cEndContractKeyword_14; }
	}
	public class AttElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Att");
		private final RuleCall cPairParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Att:
		//	Pair;
		@Override public ParserRule getRule() { return rule; }
		
		//Pair
		public RuleCall getPairParserRuleCall() { return cPairParserRuleCall; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Param");
		private final RuleCall cDeclarPairParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Param:
		//	DeclarPair;
		@Override public ParserRule getRule() { return rule; }
		
		//DeclarPair
		public RuleCall getDeclarPairParserRuleCall() { return cDeclarPairParserRuleCall; }
	}
	public class DeclarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Declar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDeclarPairParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cNamesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNamesNameParserRuleCall_2_0_0 = (RuleCall)cNamesAssignment_2_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNamesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNamesNameParserRuleCall_2_2_0 = (RuleCall)cNamesAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cNamesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNamesNameParserRuleCall_3_0_0 = (RuleCall)cNamesAssignment_3_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cNamesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cNamesNameParserRuleCall_3_2_0 = (RuleCall)cNamesAssignment_3_2.eContents().get(0);
		
		//Declar:
		//	DeclarPair 'with' (names+=Name ':=' names+=Name ',')* (names+=Name ':=' names+=Name);
		@Override public ParserRule getRule() { return rule; }
		
		//DeclarPair 'with' (names+=Name ':=' names+=Name ',')* (names+=Name ':=' names+=Name)
		public Group getGroup() { return cGroup; }
		
		//DeclarPair
		public RuleCall getDeclarPairParserRuleCall_0() { return cDeclarPairParserRuleCall_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//(names+=Name ':=' names+=Name ',')*
		public Group getGroup_2() { return cGroup_2; }
		
		//names+=Name
		public Assignment getNamesAssignment_2_0() { return cNamesAssignment_2_0; }
		
		//Name
		public RuleCall getNamesNameParserRuleCall_2_0_0() { return cNamesNameParserRuleCall_2_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_1() { return cColonEqualsSignKeyword_2_1; }
		
		//names+=Name
		public Assignment getNamesAssignment_2_2() { return cNamesAssignment_2_2; }
		
		//Name
		public RuleCall getNamesNameParserRuleCall_2_2_0() { return cNamesNameParserRuleCall_2_2_0; }
		
		//','
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }
		
		//(names+=Name ':=' names+=Name)
		public Group getGroup_3() { return cGroup_3; }
		
		//names+=Name
		public Assignment getNamesAssignment_3_0() { return cNamesAssignment_3_0; }
		
		//Name
		public RuleCall getNamesNameParserRuleCall_3_0_0() { return cNamesNameParserRuleCall_3_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_3_1() { return cColonEqualsSignKeyword_3_1; }
		
		//names+=Name
		public Assignment getNamesAssignment_3_2() { return cNamesAssignment_3_2; }
		
		//Name
		public RuleCall getNamesNameParserRuleCall_3_2_0() { return cNamesNameParserRuleCall_3_2_0; }
	}
	public class DeclarPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.DeclarPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNamesTypeNameParserRuleCall_2_0 = (RuleCall)cTypeNamesAssignment_2.eContents().get(0);
		
		//DeclarPair:
		//	name=ID ':' typeNames+=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' typeNames+=TypeName
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeNames+=TypeName
		public Assignment getTypeNamesAssignment_2() { return cTypeNamesAssignment_2; }
		
		//TypeName
		public RuleCall getTypeNamesTypeNameParserRuleCall_2_0() { return cTypeNamesTypeNameParserRuleCall_2_0; }
	}
	public class PairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesCTypeParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		
		//Pair:
		//	name=ID ':' types+=CType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' types+=CType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//types+=CType
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }
		
		//CType
		public RuleCall getTypesCTypeParserRuleCall_2_0() { return cTypesCTypeParserRuleCall_2_0; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.TypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTypeNameAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBasicTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//TypeName:
		//	name=ID | {TypeName} BasicType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID | {TypeName} BasicType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//{TypeName} BasicType
		public Group getGroup_1() { return cGroup_1; }
		
		//{TypeName}
		public Action getTypeNameAction_1_0() { return cTypeNameAction_1_0; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_1_1() { return cBasicTypeParserRuleCall_1_1; }
	}
	public class OblElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Obl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTriggerPropParserRuleCall_2_0_0 = (RuleCall)cTriggerAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cOKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRolesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRolesNameParserRuleCall_5_0 = (RuleCall)cRolesAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRolesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRolesNameParserRuleCall_7_0 = (RuleCall)cRolesAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAntecedentAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAntecedentPropParserRuleCall_9_0 = (RuleCall)cAntecedentAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cConsequentAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConsequentPropParserRuleCall_11_0 = (RuleCall)cConsequentAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Obl:
		//	name=ID ':' (trigger=Prop '->')? 'O' '(' roles+=Name ',' roles+=Name ','
		//	antecedent=Prop ',' consequent=Prop ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (trigger=Prop '->')? 'O' '(' roles+=Name ',' roles+=Name ',' antecedent=Prop ',' consequent=Prop ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(trigger=Prop '->')?
		public Group getGroup_2() { return cGroup_2; }
		
		//trigger=Prop
		public Assignment getTriggerAssignment_2_0() { return cTriggerAssignment_2_0; }
		
		//Prop
		public RuleCall getTriggerPropParserRuleCall_2_0_0() { return cTriggerPropParserRuleCall_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//'O'
		public Keyword getOKeyword_3() { return cOKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//roles+=Name
		public Assignment getRolesAssignment_5() { return cRolesAssignment_5; }
		
		//Name
		public RuleCall getRolesNameParserRuleCall_5_0() { return cRolesNameParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//roles+=Name
		public Assignment getRolesAssignment_7() { return cRolesAssignment_7; }
		
		//Name
		public RuleCall getRolesNameParserRuleCall_7_0() { return cRolesNameParserRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//antecedent=Prop
		public Assignment getAntecedentAssignment_9() { return cAntecedentAssignment_9; }
		
		//Prop
		public RuleCall getAntecedentPropParserRuleCall_9_0() { return cAntecedentPropParserRuleCall_9_0; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//consequent=Prop
		public Assignment getConsequentAssignment_11() { return cConsequentAssignment_11; }
		
		//Prop
		public RuleCall getConsequentPropParserRuleCall_11_0() { return cConsequentPropParserRuleCall_11_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class PropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Prop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJunctionsJuncParserRuleCall_0_0 = (RuleCall)cJunctionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cORKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cJunctionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cJunctionsJuncParserRuleCall_1_1_0 = (RuleCall)cJunctionsAssignment_1_1.eContents().get(0);
		
		//Prop:
		//	junctions+=Junc ('OR' junctions+=Junc)*;
		@Override public ParserRule getRule() { return rule; }
		
		//junctions+=Junc ('OR' junctions+=Junc)*
		public Group getGroup() { return cGroup; }
		
		//junctions+=Junc
		public Assignment getJunctionsAssignment_0() { return cJunctionsAssignment_0; }
		
		//Junc
		public RuleCall getJunctionsJuncParserRuleCall_0_0() { return cJunctionsJuncParserRuleCall_0_0; }
		
		//('OR' junctions+=Junc)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'OR'
		public Keyword getORKeyword_1_0() { return cORKeyword_1_0; }
		
		//junctions+=Junc
		public Assignment getJunctionsAssignment_1_1() { return cJunctionsAssignment_1_1; }
		
		//Junc
		public RuleCall getJunctionsJuncParserRuleCall_1_1_0() { return cJunctionsJuncParserRuleCall_1_1_0; }
	}
	public class JuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Junc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegativeAtomsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegativeAtomsNegParserRuleCall_0_0 = (RuleCall)cNegativeAtomsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cANDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNegativeAtomsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNegativeAtomsNegParserRuleCall_1_1_0 = (RuleCall)cNegativeAtomsAssignment_1_1.eContents().get(0);
		
		//Junc:
		//	negativeAtoms+=Neg ('AND' negativeAtoms+=Neg)*;
		@Override public ParserRule getRule() { return rule; }
		
		//negativeAtoms+=Neg ('AND' negativeAtoms+=Neg)*
		public Group getGroup() { return cGroup; }
		
		//negativeAtoms+=Neg
		public Assignment getNegativeAtomsAssignment_0() { return cNegativeAtomsAssignment_0; }
		
		//Neg
		public RuleCall getNegativeAtomsNegParserRuleCall_0_0() { return cNegativeAtomsNegParserRuleCall_0_0; }
		
		//('AND' negativeAtoms+=Neg)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'AND'
		public Keyword getANDKeyword_1_0() { return cANDKeyword_1_0; }
		
		//negativeAtoms+=Neg
		public Assignment getNegativeAtomsAssignment_1_1() { return cNegativeAtomsAssignment_1_1; }
		
		//Neg
		public RuleCall getNegativeAtomsNegParserRuleCall_1_1_0() { return cNegativeAtomsNegParserRuleCall_1_1_0; }
	}
	public class NegElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Neg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAtomicExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomicExpressionsAtomParserRuleCall_1_0 = (RuleCall)cAtomicExpressionsAssignment_1.eContents().get(0);
		
		//Neg:
		//	'NOT'? atomicExpressions+=Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//'NOT'? atomicExpressions+=Atom
		public Group getGroup() { return cGroup; }
		
		//'NOT'?
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }
		
		//atomicExpressions+=Atom
		public Assignment getAtomicExpressionsAssignment_1() { return cAtomicExpressionsAssignment_1; }
		
		//Atom
		public RuleCall getAtomicExpressionsAtomParserRuleCall_1_0() { return cAtomicExpressionsAtomParserRuleCall_1_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEventPropositionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEventPropositionsEventPropParserRuleCall_0_0 = (RuleCall)cEventPropositionsAssignment_0.eContents().get(0);
		private final Assignment cSituationPropositionsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSituationPropositionsSitPropParserRuleCall_1_0 = (RuleCall)cSituationPropositionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cShortHandNamesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cShortHandNamesNameParserRuleCall_2_0_0 = (RuleCall)cShortHandNamesAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cNamesAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cNamesNameParserRuleCall_2_2_0_0 = (RuleCall)cNamesAssignment_2_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cNamesAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNamesNameParserRuleCall_2_3_0 = (RuleCall)cNamesAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cPointsAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cPointsPointParserRuleCall_2_4_1_0 = (RuleCall)cPointsAssignment_2_4_1.eContents().get(0);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Keyword cCommaKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Assignment cIntervalsAssignment_2_5_1 = (Assignment)cGroup_2_5.eContents().get(1);
		private final RuleCall cIntervalsIntervalParserRuleCall_2_5_1_0 = (RuleCall)cIntervalsAssignment_2_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPointsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPointsPointParserRuleCall_3_0_0 = (RuleCall)cPointsAssignment_3_0.eContents().get(0);
		private final Keyword cWithinKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIntervalsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cIntervalsIntervalParserRuleCall_3_2_0 = (RuleCall)cIntervalsAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPropositionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPropositionsPropParserRuleCall_4_1_0 = (RuleCall)cPropositionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cExistsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVarNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVarNameNameParserRuleCall_5_1_0 = (RuleCall)cVarNameAssignment_5_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cSetExpsAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cSetExpsSetExpParserRuleCall_5_3_0 = (RuleCall)cSetExpsAssignment_5_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cMetaconstraintsAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cMetaconstraintsMetaConstParserRuleCall_5_5_0 = (RuleCall)cMetaconstraintsAssignment_5_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cForAllKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVarNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVarNameNameParserRuleCall_6_1_0 = (RuleCall)cVarNameAssignment_6_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cSetExpsAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cSetExpsSetExpParserRuleCall_6_3_0 = (RuleCall)cSetExpsAssignment_6_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cMetaconstraintsAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cMetaconstraintsMetaConstParserRuleCall_6_5_0 = (RuleCall)cMetaconstraintsAssignment_6_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cAtomAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cTRUEKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cAtomAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cFALSEKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		
		//Atom:
		//	eventPropositions+=EventProp
		//	| situationPropositions+=SitProp
		//	| shortHandNames+=Name '(' (names+=Name ',')* names+=Name (',' points+=Point)* (',' intervals+=Interval)* ')'
		//	| points+=Point 'within' intervals+=Interval
		//	| '(' propositions+=Prop ')'
		//	| 'exists' varName+=Name '|' setExps+=SetExp '(' metaconstraints+=MetaConst ')'
		//	| 'forAll' varName+=Name '|' setExps+=SetExp '(' metaconstraints+=MetaConst ')'
		//	| {Atom} 'TRUE' | {Atom} 'FALSE';
		@Override public ParserRule getRule() { return rule; }
		
		//eventPropositions+=EventProp | situationPropositions+=SitProp | shortHandNames+=Name '(' (names+=Name ',')* names+=Name
		//(',' points+=Point)* (',' intervals+=Interval)* ')' | points+=Point 'within' intervals+=Interval | '('
		//propositions+=Prop ')' | 'exists' varName+=Name '|' setExps+=SetExp '(' metaconstraints+=MetaConst ')' | 'forAll'
		//varName+=Name '|' setExps+=SetExp '(' metaconstraints+=MetaConst ')' | {Atom} 'TRUE' | {Atom} 'FALSE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//eventPropositions+=EventProp
		public Assignment getEventPropositionsAssignment_0() { return cEventPropositionsAssignment_0; }
		
		//EventProp
		public RuleCall getEventPropositionsEventPropParserRuleCall_0_0() { return cEventPropositionsEventPropParserRuleCall_0_0; }
		
		//situationPropositions+=SitProp
		public Assignment getSituationPropositionsAssignment_1() { return cSituationPropositionsAssignment_1; }
		
		//SitProp
		public RuleCall getSituationPropositionsSitPropParserRuleCall_1_0() { return cSituationPropositionsSitPropParserRuleCall_1_0; }
		
		//shortHandNames+=Name '(' (names+=Name ',')* names+=Name (',' points+=Point)* (',' intervals+=Interval)* ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//shortHandNames+=Name
		public Assignment getShortHandNamesAssignment_2_0() { return cShortHandNamesAssignment_2_0; }
		
		//Name
		public RuleCall getShortHandNamesNameParserRuleCall_2_0_0() { return cShortHandNamesNameParserRuleCall_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//(names+=Name ',')*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//names+=Name
		public Assignment getNamesAssignment_2_2_0() { return cNamesAssignment_2_2_0; }
		
		//Name
		public RuleCall getNamesNameParserRuleCall_2_2_0_0() { return cNamesNameParserRuleCall_2_2_0_0; }
		
		//','
		public Keyword getCommaKeyword_2_2_1() { return cCommaKeyword_2_2_1; }
		
		//names+=Name
		public Assignment getNamesAssignment_2_3() { return cNamesAssignment_2_3; }
		
		//Name
		public RuleCall getNamesNameParserRuleCall_2_3_0() { return cNamesNameParserRuleCall_2_3_0; }
		
		//(',' points+=Point)*
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//','
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }
		
		//points+=Point
		public Assignment getPointsAssignment_2_4_1() { return cPointsAssignment_2_4_1; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_2_4_1_0() { return cPointsPointParserRuleCall_2_4_1_0; }
		
		//(',' intervals+=Interval)*
		public Group getGroup_2_5() { return cGroup_2_5; }
		
		//','
		public Keyword getCommaKeyword_2_5_0() { return cCommaKeyword_2_5_0; }
		
		//intervals+=Interval
		public Assignment getIntervalsAssignment_2_5_1() { return cIntervalsAssignment_2_5_1; }
		
		//Interval
		public RuleCall getIntervalsIntervalParserRuleCall_2_5_1_0() { return cIntervalsIntervalParserRuleCall_2_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
		
		//points+=Point 'within' intervals+=Interval
		public Group getGroup_3() { return cGroup_3; }
		
		//points+=Point
		public Assignment getPointsAssignment_3_0() { return cPointsAssignment_3_0; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_3_0_0() { return cPointsPointParserRuleCall_3_0_0; }
		
		//'within'
		public Keyword getWithinKeyword_3_1() { return cWithinKeyword_3_1; }
		
		//intervals+=Interval
		public Assignment getIntervalsAssignment_3_2() { return cIntervalsAssignment_3_2; }
		
		//Interval
		public RuleCall getIntervalsIntervalParserRuleCall_3_2_0() { return cIntervalsIntervalParserRuleCall_3_2_0; }
		
		//'(' propositions+=Prop ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//propositions+=Prop
		public Assignment getPropositionsAssignment_4_1() { return cPropositionsAssignment_4_1; }
		
		//Prop
		public RuleCall getPropositionsPropParserRuleCall_4_1_0() { return cPropositionsPropParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//'exists' varName+=Name '|' setExps+=SetExp '(' metaconstraints+=MetaConst ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'exists'
		public Keyword getExistsKeyword_5_0() { return cExistsKeyword_5_0; }
		
		//varName+=Name
		public Assignment getVarNameAssignment_5_1() { return cVarNameAssignment_5_1; }
		
		//Name
		public RuleCall getVarNameNameParserRuleCall_5_1_0() { return cVarNameNameParserRuleCall_5_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_5_2() { return cVerticalLineKeyword_5_2; }
		
		//setExps+=SetExp
		public Assignment getSetExpsAssignment_5_3() { return cSetExpsAssignment_5_3; }
		
		//SetExp
		public RuleCall getSetExpsSetExpParserRuleCall_5_3_0() { return cSetExpsSetExpParserRuleCall_5_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_4() { return cLeftParenthesisKeyword_5_4; }
		
		//metaconstraints+=MetaConst
		public Assignment getMetaconstraintsAssignment_5_5() { return cMetaconstraintsAssignment_5_5; }
		
		//MetaConst
		public RuleCall getMetaconstraintsMetaConstParserRuleCall_5_5_0() { return cMetaconstraintsMetaConstParserRuleCall_5_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }
		
		//'forAll' varName+=Name '|' setExps+=SetExp '(' metaconstraints+=MetaConst ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'forAll'
		public Keyword getForAllKeyword_6_0() { return cForAllKeyword_6_0; }
		
		//varName+=Name
		public Assignment getVarNameAssignment_6_1() { return cVarNameAssignment_6_1; }
		
		//Name
		public RuleCall getVarNameNameParserRuleCall_6_1_0() { return cVarNameNameParserRuleCall_6_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_6_2() { return cVerticalLineKeyword_6_2; }
		
		//setExps+=SetExp
		public Assignment getSetExpsAssignment_6_3() { return cSetExpsAssignment_6_3; }
		
		//SetExp
		public RuleCall getSetExpsSetExpParserRuleCall_6_3_0() { return cSetExpsSetExpParserRuleCall_6_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_4() { return cLeftParenthesisKeyword_6_4; }
		
		//metaconstraints+=MetaConst
		public Assignment getMetaconstraintsAssignment_6_5() { return cMetaconstraintsAssignment_6_5; }
		
		//MetaConst
		public RuleCall getMetaconstraintsMetaConstParserRuleCall_6_5_0() { return cMetaconstraintsMetaConstParserRuleCall_6_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }
		
		//{Atom} 'TRUE'
		public Group getGroup_7() { return cGroup_7; }
		
		//{Atom}
		public Action getAtomAction_7_0() { return cAtomAction_7_0; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_7_1() { return cTRUEKeyword_7_1; }
		
		//{Atom} 'FALSE'
		public Group getGroup_8() { return cGroup_8; }
		
		//{Atom}
		public Action getAtomAction_8_0() { return cAtomAction_8_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_8_1() { return cFALSEKeyword_8_1; }
	}
	public class SitPropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.SitProp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cOccursKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSituationNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cSituationNameNameCrossReference_0_2_0 = (CrossReference)cSituationNameAssignment_0_2.eContents().get(0);
		private final RuleCall cSituationNameNameIDTerminalRuleCall_0_2_0_1 = (RuleCall)cSituationNameNameCrossReference_0_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cIntervalsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cIntervalsIntervalParserRuleCall_0_4_0 = (RuleCall)cIntervalsAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOccursKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOSituationNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOSituationNameOStateParserRuleCall_1_2_0 = (RuleCall)cOSituationNameAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cIntervalsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cIntervalsIntervalParserRuleCall_1_4_0 = (RuleCall)cIntervalsAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cOccursKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCSituationNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCSituationNameCStateParserRuleCall_2_2_0 = (RuleCall)cCSituationNameAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cIntervalsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cIntervalsIntervalParserRuleCall_2_4_0 = (RuleCall)cIntervalsAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cOccursKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cPSituationNameAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cPSituationNamePStateParserRuleCall_3_2_0 = (RuleCall)cPSituationNameAssignment_3_2.eContents().get(0);
		private final Keyword cCommaKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cIntervalsAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cIntervalsIntervalParserRuleCall_3_4_0 = (RuleCall)cIntervalsAssignment_3_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//SitProp:
		//	'occurs' '(' situationName=[Name] ',' intervals+=Interval ')'
		//	| 'occurs' '(' oSituationName=oState ',' intervals+=Interval ')'
		//	| 'occurs' '(' cSituationName=cState ',' intervals+=Interval ')'
		//	| 'occurs' '(' pSituationName=pState ',' intervals+=Interval ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'occurs' '(' situationName=[Name] ',' intervals+=Interval ')' | 'occurs' '(' oSituationName=oState ','
		//intervals+=Interval ')' | 'occurs' '(' cSituationName=cState ',' intervals+=Interval ')' | 'occurs' '('
		//pSituationName=pState ',' intervals+=Interval ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'occurs' '(' situationName=[Name] ',' intervals+=Interval ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'occurs'
		public Keyword getOccursKeyword_0_0() { return cOccursKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//situationName=[Name]
		public Assignment getSituationNameAssignment_0_2() { return cSituationNameAssignment_0_2; }
		
		//[Name]
		public CrossReference getSituationNameNameCrossReference_0_2_0() { return cSituationNameNameCrossReference_0_2_0; }
		
		//ID
		public RuleCall getSituationNameNameIDTerminalRuleCall_0_2_0_1() { return cSituationNameNameIDTerminalRuleCall_0_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//intervals+=Interval
		public Assignment getIntervalsAssignment_0_4() { return cIntervalsAssignment_0_4; }
		
		//Interval
		public RuleCall getIntervalsIntervalParserRuleCall_0_4_0() { return cIntervalsIntervalParserRuleCall_0_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//'occurs' '(' oSituationName=oState ',' intervals+=Interval ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'occurs'
		public Keyword getOccursKeyword_1_0() { return cOccursKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//oSituationName=oState
		public Assignment getOSituationNameAssignment_1_2() { return cOSituationNameAssignment_1_2; }
		
		//oState
		public RuleCall getOSituationNameOStateParserRuleCall_1_2_0() { return cOSituationNameOStateParserRuleCall_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//intervals+=Interval
		public Assignment getIntervalsAssignment_1_4() { return cIntervalsAssignment_1_4; }
		
		//Interval
		public RuleCall getIntervalsIntervalParserRuleCall_1_4_0() { return cIntervalsIntervalParserRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//'occurs' '(' cSituationName=cState ',' intervals+=Interval ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'occurs'
		public Keyword getOccursKeyword_2_0() { return cOccursKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//cSituationName=cState
		public Assignment getCSituationNameAssignment_2_2() { return cCSituationNameAssignment_2_2; }
		
		//cState
		public RuleCall getCSituationNameCStateParserRuleCall_2_2_0() { return cCSituationNameCStateParserRuleCall_2_2_0; }
		
		//','
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }
		
		//intervals+=Interval
		public Assignment getIntervalsAssignment_2_4() { return cIntervalsAssignment_2_4; }
		
		//Interval
		public RuleCall getIntervalsIntervalParserRuleCall_2_4_0() { return cIntervalsIntervalParserRuleCall_2_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
		
		//'occurs' '(' pSituationName=pState ',' intervals+=Interval ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'occurs'
		public Keyword getOccursKeyword_3_0() { return cOccursKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//pSituationName=pState
		public Assignment getPSituationNameAssignment_3_2() { return cPSituationNameAssignment_3_2; }
		
		//pState
		public RuleCall getPSituationNamePStateParserRuleCall_3_2_0() { return cPSituationNamePStateParserRuleCall_3_2_0; }
		
		//','
		public Keyword getCommaKeyword_3_3() { return cCommaKeyword_3_3; }
		
		//intervals+=Interval
		public Assignment getIntervalsAssignment_3_4() { return cIntervalsAssignment_3_4; }
		
		//Interval
		public RuleCall getIntervalsIntervalParserRuleCall_3_4_0() { return cIntervalsIntervalParserRuleCall_3_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}
	public class EventPropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.EventProp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHappensKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEventNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cEventNameDeclarCrossReference_0_2_0 = (CrossReference)cEventNameAssignment_0_2.eContents().get(0);
		private final RuleCall cEventNameDeclarIDTerminalRuleCall_0_2_0_1 = (RuleCall)cEventNameDeclarCrossReference_0_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cPointsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cPointsPointParserRuleCall_0_4_0 = (RuleCall)cPointsAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHappensKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOEventNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOEventNameOEventParserRuleCall_1_2_0 = (RuleCall)cOEventNameAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cPointsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cPointsPointParserRuleCall_1_4_0 = (RuleCall)cPointsAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cHappensKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCEventNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCEventNameCEventParserRuleCall_2_2_0 = (RuleCall)cCEventNameAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cPointsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cPointsPointParserRuleCall_2_4_0 = (RuleCall)cPointsAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHappensKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cPEventNameAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cPEventNamePEventParserRuleCall_3_2_0 = (RuleCall)cPEventNameAssignment_3_2.eContents().get(0);
		private final Keyword cCommaKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cPointsAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cPointsPointParserRuleCall_3_4_0 = (RuleCall)cPointsAssignment_3_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//EventProp:
		//	'happens' '(' eventName=[Declar] ',' points+=Point ')'
		//	| 'happens' '(' oEventName=oEvent ',' points+=Point ')'
		//	| 'happens' '(' cEventName=cEvent ',' points+=Point ')'
		//	| 'happens' '(' pEventName=pEvent ',' points+=Point ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'happens' '(' eventName=[Declar] ',' points+=Point ')' | 'happens' '(' oEventName=oEvent ',' points+=Point ')' |
		//'happens' '(' cEventName=cEvent ',' points+=Point ')' | 'happens' '(' pEventName=pEvent ',' points+=Point ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'happens' '(' eventName=[Declar] ',' points+=Point ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'happens'
		public Keyword getHappensKeyword_0_0() { return cHappensKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//eventName=[Declar]
		public Assignment getEventNameAssignment_0_2() { return cEventNameAssignment_0_2; }
		
		//[Declar]
		public CrossReference getEventNameDeclarCrossReference_0_2_0() { return cEventNameDeclarCrossReference_0_2_0; }
		
		//ID
		public RuleCall getEventNameDeclarIDTerminalRuleCall_0_2_0_1() { return cEventNameDeclarIDTerminalRuleCall_0_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//points+=Point
		public Assignment getPointsAssignment_0_4() { return cPointsAssignment_0_4; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_0_4_0() { return cPointsPointParserRuleCall_0_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//'happens' '(' oEventName=oEvent ',' points+=Point ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'happens'
		public Keyword getHappensKeyword_1_0() { return cHappensKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//oEventName=oEvent
		public Assignment getOEventNameAssignment_1_2() { return cOEventNameAssignment_1_2; }
		
		//oEvent
		public RuleCall getOEventNameOEventParserRuleCall_1_2_0() { return cOEventNameOEventParserRuleCall_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//points+=Point
		public Assignment getPointsAssignment_1_4() { return cPointsAssignment_1_4; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_1_4_0() { return cPointsPointParserRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//'happens' '(' cEventName=cEvent ',' points+=Point ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'happens'
		public Keyword getHappensKeyword_2_0() { return cHappensKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//cEventName=cEvent
		public Assignment getCEventNameAssignment_2_2() { return cCEventNameAssignment_2_2; }
		
		//cEvent
		public RuleCall getCEventNameCEventParserRuleCall_2_2_0() { return cCEventNameCEventParserRuleCall_2_2_0; }
		
		//','
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }
		
		//points+=Point
		public Assignment getPointsAssignment_2_4() { return cPointsAssignment_2_4; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_2_4_0() { return cPointsPointParserRuleCall_2_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
		
		//'happens' '(' pEventName=pEvent ',' points+=Point ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'happens'
		public Keyword getHappensKeyword_3_0() { return cHappensKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//pEventName=pEvent
		public Assignment getPEventNameAssignment_3_2() { return cPEventNameAssignment_3_2; }
		
		//pEvent
		public RuleCall getPEventNamePEventParserRuleCall_3_2_0() { return cPEventNamePEventParserRuleCall_3_2_0; }
		
		//','
		public Keyword getCommaKeyword_3_3() { return cCommaKeyword_3_3; }
		
		//points+=Point
		public Assignment getPointsAssignment_3_4() { return cPointsAssignment_3_4; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_3_4_0() { return cPointsPointParserRuleCall_3_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
	}
	public class MetaConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.MetaConst");
		private final Keyword cCannotBeAssignedKeyword = (Keyword)rule.eContents().get(1);
		
		//MetaConst:
		//	'CannotBeAssigned';
		@Override public ParserRule getRule() { return rule; }
		
		//'CannotBeAssigned'
		public Keyword getCannotBeAssignedKeyword() { return cCannotBeAssignedKeyword; }
	}
	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Interval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSituationNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSituationNameSitNameParserRuleCall_0_0 = (RuleCall)cSituationNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPointsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPointsPointParserRuleCall_1_1_0 = (RuleCall)cPointsAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPointsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPointsPointParserRuleCall_1_3_0 = (RuleCall)cPointsAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntervalAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cUNNAMED_INTERVALKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cSituationNamesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSituationNamesSitNameParserRuleCall_3_0_0 = (RuleCall)cSituationNamesAssignment_3_0.eContents().get(0);
		private final Assignment cTempOpsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTempOpsTempOpParserRuleCall_3_1_0 = (RuleCall)cTempOpsAssignment_3_1.eContents().get(0);
		private final Assignment cIntConstsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cIntConstsIntConstParserRuleCall_3_2_0 = (RuleCall)cIntConstsAssignment_3_2.eContents().get(0);
		private final Assignment cUnitsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cUnitsUnitParserRuleCall_3_3_0 = (RuleCall)cUnitsAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cIntConstsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cIntConstsIntConstParserRuleCall_4_0_0 = (RuleCall)cIntConstsAssignment_4_0.eContents().get(0);
		private final Assignment cUnitsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnitsUnitParserRuleCall_4_1_0 = (RuleCall)cUnitsAssignment_4_1.eContents().get(0);
		private final Assignment cTempOpsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTempOpsTempOpParserRuleCall_4_2_0 = (RuleCall)cTempOpsAssignment_4_2.eContents().get(0);
		private final Assignment cSituationNamesAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cSituationNamesSitNameParserRuleCall_4_3_0 = (RuleCall)cSituationNamesAssignment_4_3.eContents().get(0);
		
		//Interval:
		//	situationName=SitName | '[' points+=Point ',' points+=Point ']'
		//	| {Interval} 'UNNAMED_INTERVAL'
		//	| situationNames+=SitName tempOps+=TempOp intConsts+=IntConst units+=Unit | intConsts+=IntConst units+=Unit
		//	tempOps+=TempOp situationNames+=SitName;
		@Override public ParserRule getRule() { return rule; }
		
		//situationName=SitName | '[' points+=Point ',' points+=Point ']' | {Interval} 'UNNAMED_INTERVAL' |
		//situationNames+=SitName tempOps+=TempOp intConsts+=IntConst units+=Unit | intConsts+=IntConst units+=Unit
		//tempOps+=TempOp situationNames+=SitName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//situationName=SitName
		public Assignment getSituationNameAssignment_0() { return cSituationNameAssignment_0; }
		
		//SitName
		public RuleCall getSituationNameSitNameParserRuleCall_0_0() { return cSituationNameSitNameParserRuleCall_0_0; }
		
		//'[' points+=Point ',' points+=Point ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//points+=Point
		public Assignment getPointsAssignment_1_1() { return cPointsAssignment_1_1; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_1_1_0() { return cPointsPointParserRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//points+=Point
		public Assignment getPointsAssignment_1_3() { return cPointsAssignment_1_3; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_1_3_0() { return cPointsPointParserRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
		
		//{Interval} 'UNNAMED_INTERVAL'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Interval}
		public Action getIntervalAction_2_0() { return cIntervalAction_2_0; }
		
		//'UNNAMED_INTERVAL'
		public Keyword getUNNAMED_INTERVALKeyword_2_1() { return cUNNAMED_INTERVALKeyword_2_1; }
		
		//situationNames+=SitName tempOps+=TempOp intConsts+=IntConst units+=Unit
		public Group getGroup_3() { return cGroup_3; }
		
		//situationNames+=SitName
		public Assignment getSituationNamesAssignment_3_0() { return cSituationNamesAssignment_3_0; }
		
		//SitName
		public RuleCall getSituationNamesSitNameParserRuleCall_3_0_0() { return cSituationNamesSitNameParserRuleCall_3_0_0; }
		
		//tempOps+=TempOp
		public Assignment getTempOpsAssignment_3_1() { return cTempOpsAssignment_3_1; }
		
		//TempOp
		public RuleCall getTempOpsTempOpParserRuleCall_3_1_0() { return cTempOpsTempOpParserRuleCall_3_1_0; }
		
		//intConsts+=IntConst
		public Assignment getIntConstsAssignment_3_2() { return cIntConstsAssignment_3_2; }
		
		//IntConst
		public RuleCall getIntConstsIntConstParserRuleCall_3_2_0() { return cIntConstsIntConstParserRuleCall_3_2_0; }
		
		//units+=Unit
		public Assignment getUnitsAssignment_3_3() { return cUnitsAssignment_3_3; }
		
		//Unit
		public RuleCall getUnitsUnitParserRuleCall_3_3_0() { return cUnitsUnitParserRuleCall_3_3_0; }
		
		//intConsts+=IntConst units+=Unit tempOps+=TempOp situationNames+=SitName
		public Group getGroup_4() { return cGroup_4; }
		
		//intConsts+=IntConst
		public Assignment getIntConstsAssignment_4_0() { return cIntConstsAssignment_4_0; }
		
		//IntConst
		public RuleCall getIntConstsIntConstParserRuleCall_4_0_0() { return cIntConstsIntConstParserRuleCall_4_0_0; }
		
		//units+=Unit
		public Assignment getUnitsAssignment_4_1() { return cUnitsAssignment_4_1; }
		
		//Unit
		public RuleCall getUnitsUnitParserRuleCall_4_1_0() { return cUnitsUnitParserRuleCall_4_1_0; }
		
		//tempOps+=TempOp
		public Assignment getTempOpsAssignment_4_2() { return cTempOpsAssignment_4_2; }
		
		//TempOp
		public RuleCall getTempOpsTempOpParserRuleCall_4_2_0() { return cTempOpsTempOpParserRuleCall_4_2_0; }
		
		//situationNames+=SitName
		public Assignment getSituationNamesAssignment_4_3() { return cSituationNamesAssignment_4_3; }
		
		//SitName
		public RuleCall getSituationNamesSitNameParserRuleCall_4_3_0() { return cSituationNamesSitNameParserRuleCall_4_3_0; }
	}
	public class SitNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.SitName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSitNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSitNameNameParserRuleCall_0_0 = (RuleCall)cSitNameAssignment_0.eContents().get(0);
		private final Assignment cOStatesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOStatesOStateParserRuleCall_1_0 = (RuleCall)cOStatesAssignment_1.eContents().get(0);
		private final Assignment cPStatesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPStatesPStateParserRuleCall_2_0 = (RuleCall)cPStatesAssignment_2.eContents().get(0);
		private final Assignment cCStatesAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCStatesCStateParserRuleCall_3_0 = (RuleCall)cCStatesAssignment_3.eContents().get(0);
		private final Assignment cOEventsAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cOEventsOEventParserRuleCall_4_0 = (RuleCall)cOEventsAssignment_4.eContents().get(0);
		private final Assignment cCEventsAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cCEventsCEventParserRuleCall_5_0 = (RuleCall)cCEventsAssignment_5.eContents().get(0);
		private final Assignment cPEventsAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cPEventsPEventParserRuleCall_6_0 = (RuleCall)cPEventsAssignment_6.eContents().get(0);
		
		//SitName:
		//	SitName+=Name | oStates+=oState | pStates+=pState | cStates+=cState
		//	| oEvents+=oEvent | cEvents+=cEvent | pEvents+=pEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//SitName+=Name | oStates+=oState | pStates+=pState | cStates+=cState | oEvents+=oEvent | cEvents+=cEvent |
		//pEvents+=pEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SitName+=Name
		public Assignment getSitNameAssignment_0() { return cSitNameAssignment_0; }
		
		//Name
		public RuleCall getSitNameNameParserRuleCall_0_0() { return cSitNameNameParserRuleCall_0_0; }
		
		//oStates+=oState
		public Assignment getOStatesAssignment_1() { return cOStatesAssignment_1; }
		
		//oState
		public RuleCall getOStatesOStateParserRuleCall_1_0() { return cOStatesOStateParserRuleCall_1_0; }
		
		//pStates+=pState
		public Assignment getPStatesAssignment_2() { return cPStatesAssignment_2; }
		
		//pState
		public RuleCall getPStatesPStateParserRuleCall_2_0() { return cPStatesPStateParserRuleCall_2_0; }
		
		//cStates+=cState
		public Assignment getCStatesAssignment_3() { return cCStatesAssignment_3; }
		
		//cState
		public RuleCall getCStatesCStateParserRuleCall_3_0() { return cCStatesCStateParserRuleCall_3_0; }
		
		//oEvents+=oEvent
		public Assignment getOEventsAssignment_4() { return cOEventsAssignment_4; }
		
		//oEvent
		public RuleCall getOEventsOEventParserRuleCall_4_0() { return cOEventsOEventParserRuleCall_4_0; }
		
		//cEvents+=cEvent
		public Assignment getCEventsAssignment_5() { return cCEventsAssignment_5; }
		
		//cEvent
		public RuleCall getCEventsCEventParserRuleCall_5_0() { return cCEventsCEventParserRuleCall_5_0; }
		
		//pEvents+=pEvent
		public Assignment getPEventsAssignment_6() { return cPEventsAssignment_6; }
		
		//pEvent
		public RuleCall getPEventsPEventParserRuleCall_6_0() { return cPEventsPEventParserRuleCall_6_0; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSECONDSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMINUTESKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHOURSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDAYSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cWEEKSKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMONTHSKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cQUARTERSKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cYEARSKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Unit:
		//	'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'QUARTERS'
		//	| 'YEARS';
		@Override public ParserRule getRule() { return rule; }
		
		//'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'QUARTERS' | 'YEARS'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'SECONDS'
		public Keyword getSECONDSKeyword_0() { return cSECONDSKeyword_0; }
		
		//'MINUTES'
		public Keyword getMINUTESKeyword_1() { return cMINUTESKeyword_1; }
		
		//'HOURS'
		public Keyword getHOURSKeyword_2() { return cHOURSKeyword_2; }
		
		//'DAYS'
		public Keyword getDAYSKeyword_3() { return cDAYSKeyword_3; }
		
		//'WEEKS'
		public Keyword getWEEKSKeyword_4() { return cWEEKSKeyword_4; }
		
		//'MONTHS'
		public Keyword getMONTHSKeyword_5() { return cMONTHSKeyword_5; }
		
		//'QUARTERS'
		public Keyword getQUARTERSKeyword_6() { return cQUARTERSKeyword_6; }
		
		//'YEARS'
		public Keyword getYEARSKeyword_7() { return cYEARSKeyword_7; }
	}
	public class IntConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.IntConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeINTTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//IntConst:
		//	{IntConst} Type=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConst} Type=INT
		public Group getGroup() { return cGroup; }
		
		//{IntConst}
		public Action getIntConstAction_0() { return cIntConstAction_0; }
		
		//Type=INT
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//INT
		public RuleCall getTypeINTTerminalRuleCall_1_0() { return cTypeINTTerminalRuleCall_1_0; }
	}
	public class TempOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.TempOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBEFOREKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAFTERKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cATKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cWITHINKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//TempOp:
		//	'BEFORE' | 'AFTER' | 'AT' | 'WITHIN' | '+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'BEFORE' | 'AFTER' | 'AT' | 'WITHIN' | '+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BEFORE'
		public Keyword getBEFOREKeyword_0() { return cBEFOREKeyword_0; }
		
		//'AFTER'
		public Keyword getAFTERKeyword_1() { return cAFTERKeyword_1; }
		
		//'AT'
		public Keyword getATKeyword_2() { return cATKeyword_2; }
		
		//'WITHIN'
		public Keyword getWITHINKeyword_3() { return cWITHINKeyword_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_4() { return cPlusSignKeyword_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Point");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEventNamesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEventNamesSitNameParserRuleCall_0_0 = (RuleCall)cEventNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPointAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cUNNAMED_POINTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPointConstsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPointConstsPointConstParserRuleCall_2_0 = (RuleCall)cPointConstsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPointConstsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPointConstsPointConstParserRuleCall_3_0_0 = (RuleCall)cPointConstsAssignment_3_0.eContents().get(0);
		private final Assignment cUnitsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUnitsUnitParserRuleCall_3_1_0 = (RuleCall)cUnitsAssignment_3_1.eContents().get(0);
		private final Assignment cTempOpsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTempOpsTempOpParserRuleCall_3_2_0 = (RuleCall)cTempOpsAssignment_3_2.eContents().get(0);
		private final Assignment cEventNamesAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cEventNamesSitNameParserRuleCall_3_3_0 = (RuleCall)cEventNamesAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cEventNamesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEventNamesSitNameParserRuleCall_4_0_0 = (RuleCall)cEventNamesAssignment_4_0.eContents().get(0);
		private final Assignment cTempOpsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTempOpsTempOpParserRuleCall_4_1_0 = (RuleCall)cTempOpsAssignment_4_1.eContents().get(0);
		private final Assignment cPointConstsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPointConstsPointConstParserRuleCall_4_2_0 = (RuleCall)cPointConstsAssignment_4_2.eContents().get(0);
		private final Assignment cUnitsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cUnitsUnitParserRuleCall_4_3_0 = (RuleCall)cUnitsAssignment_4_3.eContents().get(0);
		
		//Point:
		//	eventNames+=SitName | {Point} 'UNNAMED_POINT' | pointConsts+=PointConst | pointConsts+=PointConst units+=Unit
		//	tempOps+=TempOp eventNames+=SitName | eventNames+=SitName tempOps+=TempOp pointConsts+=PointConst units+=Unit;
		@Override public ParserRule getRule() { return rule; }
		
		//eventNames+=SitName | {Point} 'UNNAMED_POINT' | pointConsts+=PointConst | pointConsts+=PointConst units+=Unit
		//tempOps+=TempOp eventNames+=SitName | eventNames+=SitName tempOps+=TempOp pointConsts+=PointConst units+=Unit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//eventNames+=SitName
		public Assignment getEventNamesAssignment_0() { return cEventNamesAssignment_0; }
		
		//SitName
		public RuleCall getEventNamesSitNameParserRuleCall_0_0() { return cEventNamesSitNameParserRuleCall_0_0; }
		
		//{Point} 'UNNAMED_POINT'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Point}
		public Action getPointAction_1_0() { return cPointAction_1_0; }
		
		//'UNNAMED_POINT'
		public Keyword getUNNAMED_POINTKeyword_1_1() { return cUNNAMED_POINTKeyword_1_1; }
		
		//pointConsts+=PointConst
		public Assignment getPointConstsAssignment_2() { return cPointConstsAssignment_2; }
		
		//PointConst
		public RuleCall getPointConstsPointConstParserRuleCall_2_0() { return cPointConstsPointConstParserRuleCall_2_0; }
		
		//pointConsts+=PointConst units+=Unit tempOps+=TempOp eventNames+=SitName
		public Group getGroup_3() { return cGroup_3; }
		
		//pointConsts+=PointConst
		public Assignment getPointConstsAssignment_3_0() { return cPointConstsAssignment_3_0; }
		
		//PointConst
		public RuleCall getPointConstsPointConstParserRuleCall_3_0_0() { return cPointConstsPointConstParserRuleCall_3_0_0; }
		
		//units+=Unit
		public Assignment getUnitsAssignment_3_1() { return cUnitsAssignment_3_1; }
		
		//Unit
		public RuleCall getUnitsUnitParserRuleCall_3_1_0() { return cUnitsUnitParserRuleCall_3_1_0; }
		
		//tempOps+=TempOp
		public Assignment getTempOpsAssignment_3_2() { return cTempOpsAssignment_3_2; }
		
		//TempOp
		public RuleCall getTempOpsTempOpParserRuleCall_3_2_0() { return cTempOpsTempOpParserRuleCall_3_2_0; }
		
		//eventNames+=SitName
		public Assignment getEventNamesAssignment_3_3() { return cEventNamesAssignment_3_3; }
		
		//SitName
		public RuleCall getEventNamesSitNameParserRuleCall_3_3_0() { return cEventNamesSitNameParserRuleCall_3_3_0; }
		
		//eventNames+=SitName tempOps+=TempOp pointConsts+=PointConst units+=Unit
		public Group getGroup_4() { return cGroup_4; }
		
		//eventNames+=SitName
		public Assignment getEventNamesAssignment_4_0() { return cEventNamesAssignment_4_0; }
		
		//SitName
		public RuleCall getEventNamesSitNameParserRuleCall_4_0_0() { return cEventNamesSitNameParserRuleCall_4_0_0; }
		
		//tempOps+=TempOp
		public Assignment getTempOpsAssignment_4_1() { return cTempOpsAssignment_4_1; }
		
		//TempOp
		public RuleCall getTempOpsTempOpParserRuleCall_4_1_0() { return cTempOpsTempOpParserRuleCall_4_1_0; }
		
		//pointConsts+=PointConst
		public Assignment getPointConstsAssignment_4_2() { return cPointConstsAssignment_4_2; }
		
		//PointConst
		public RuleCall getPointConstsPointConstParserRuleCall_4_2_0() { return cPointConstsPointConstParserRuleCall_4_2_0; }
		
		//units+=Unit
		public Assignment getUnitsAssignment_4_3() { return cUnitsAssignment_4_3; }
		
		//Unit
		public RuleCall getUnitsUnitParserRuleCall_4_3_0() { return cUnitsUnitParserRuleCall_4_3_0; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Name");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Name:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class PEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.pEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPowEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPowEventPowEventParserRuleCall_0_0 = (RuleCall)cPowEventAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPowNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPowNamePowCrossReference_2_0 = (CrossReference)cPowNameAssignment_2.eContents().get(0);
		private final RuleCall cPowNamePowIDTerminalRuleCall_2_0_1 = (RuleCall)cPowNamePowCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//pEvent:
		//	powEvent=PowEvent '(' powName=[Pow] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//powEvent=PowEvent '(' powName=[Pow] ')'
		public Group getGroup() { return cGroup; }
		
		//powEvent=PowEvent
		public Assignment getPowEventAssignment_0() { return cPowEventAssignment_0; }
		
		//PowEvent
		public RuleCall getPowEventPowEventParserRuleCall_0_0() { return cPowEventPowEventParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//powName=[Pow]
		public Assignment getPowNameAssignment_2() { return cPowNameAssignment_2; }
		
		//[Pow]
		public CrossReference getPowNamePowCrossReference_2_0() { return cPowNamePowCrossReference_2_0; }
		
		//ID
		public RuleCall getPowNamePowIDTerminalRuleCall_2_0_1() { return cPowNamePowIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PowEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.PowEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPTRIGGEREDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPACTIVATEDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPSUSPENDEDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPRESUMEDKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPEXERTEDKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPEXPIREDKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPTERMINATEDKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//PowEvent:
		//	'pTRIGGERED' | 'pACTIVATED' | 'pSUSPENDED' | 'pRESUMED' | 'pEXERTED'
		//	| 'pEXPIRED' | 'pTERMINATED';
		@Override public ParserRule getRule() { return rule; }
		
		//'pTRIGGERED' | 'pACTIVATED' | 'pSUSPENDED' | 'pRESUMED' | 'pEXERTED' | 'pEXPIRED' | 'pTERMINATED'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'pTRIGGERED'
		public Keyword getPTRIGGEREDKeyword_0() { return cPTRIGGEREDKeyword_0; }
		
		//'pACTIVATED'
		public Keyword getPACTIVATEDKeyword_1() { return cPACTIVATEDKeyword_1; }
		
		//'pSUSPENDED'
		public Keyword getPSUSPENDEDKeyword_2() { return cPSUSPENDEDKeyword_2; }
		
		//'pRESUMED'
		public Keyword getPRESUMEDKeyword_3() { return cPRESUMEDKeyword_3; }
		
		//'pEXERTED'
		public Keyword getPEXERTEDKeyword_4() { return cPEXERTEDKeyword_4; }
		
		//'pEXPIRED'
		public Keyword getPEXPIREDKeyword_5() { return cPEXPIREDKeyword_5; }
		
		//'pTERMINATED'
		public Keyword getPTERMINATEDKeyword_6() { return cPTERMINATEDKeyword_6; }
	}
	public class CEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.cEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContrEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContrEventContrEventParserRuleCall_0_0 = (RuleCall)cContrEventAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContrNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContrNameContractCrossReference_2_0 = (CrossReference)cContrNameAssignment_2.eContents().get(0);
		private final RuleCall cContrNameContractIDTerminalRuleCall_2_0_1 = (RuleCall)cContrNameContractCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//cEvent:
		//	contrEvent=ContrEvent '(' contrName=[Contract] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//contrEvent=ContrEvent '(' contrName=[Contract] ')'
		public Group getGroup() { return cGroup; }
		
		//contrEvent=ContrEvent
		public Assignment getContrEventAssignment_0() { return cContrEventAssignment_0; }
		
		//ContrEvent
		public RuleCall getContrEventContrEventParserRuleCall_0_0() { return cContrEventContrEventParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//contrName=[Contract]
		public Assignment getContrNameAssignment_2() { return cContrNameAssignment_2; }
		
		//[Contract]
		public CrossReference getContrNameContractCrossReference_2_0() { return cContrNameContractCrossReference_2_0; }
		
		//ID
		public RuleCall getContrNameContractIDTerminalRuleCall_2_0_1() { return cContrNameContractIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ContrEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.ContrEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCACTIVATEDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCSUSPENDEDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCRESUMEDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCFULFILLED_ACTIVE_OBLSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCREVOKED_PARTYKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCASSIGNED_PARTYKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCTERMINATEDKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//ContrEvent:
		//	'cACTIVATED' | 'cSUSPENDED' | 'cRESUMED' | 'cFULFILLED_ACTIVE_OBLS'
		//	| 'cREVOKED_PARTY' | 'cASSIGNED_PARTY' | 'cTERMINATED';
		@Override public ParserRule getRule() { return rule; }
		
		//'cACTIVATED' | 'cSUSPENDED' | 'cRESUMED' | 'cFULFILLED_ACTIVE_OBLS' | 'cREVOKED_PARTY' | 'cASSIGNED_PARTY' |
		//'cTERMINATED'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'cACTIVATED'
		public Keyword getCACTIVATEDKeyword_0() { return cCACTIVATEDKeyword_0; }
		
		//'cSUSPENDED'
		public Keyword getCSUSPENDEDKeyword_1() { return cCSUSPENDEDKeyword_1; }
		
		//'cRESUMED'
		public Keyword getCRESUMEDKeyword_2() { return cCRESUMEDKeyword_2; }
		
		//'cFULFILLED_ACTIVE_OBLS'
		public Keyword getCFULFILLED_ACTIVE_OBLSKeyword_3() { return cCFULFILLED_ACTIVE_OBLSKeyword_3; }
		
		//'cREVOKED_PARTY'
		public Keyword getCREVOKED_PARTYKeyword_4() { return cCREVOKED_PARTYKeyword_4; }
		
		//'cASSIGNED_PARTY'
		public Keyword getCASSIGNED_PARTYKeyword_5() { return cCASSIGNED_PARTYKeyword_5; }
		
		//'cTERMINATED'
		public Keyword getCTERMINATEDKeyword_6() { return cCTERMINATEDKeyword_6; }
	}
	public class OEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.oEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOblEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOblEventOblEventParserRuleCall_0_0 = (RuleCall)cOblEventAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOblNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOblNameOblCrossReference_2_0 = (CrossReference)cOblNameAssignment_2.eContents().get(0);
		private final RuleCall cOblNameOblIDTerminalRuleCall_2_0_1 = (RuleCall)cOblNameOblCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//oEvent:
		//	oblEvent=OblEvent '(' oblName=[Obl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//oblEvent=OblEvent '(' oblName=[Obl] ')'
		public Group getGroup() { return cGroup; }
		
		//oblEvent=OblEvent
		public Assignment getOblEventAssignment_0() { return cOblEventAssignment_0; }
		
		//OblEvent
		public RuleCall getOblEventOblEventParserRuleCall_0_0() { return cOblEventOblEventParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//oblName=[Obl]
		public Assignment getOblNameAssignment_2() { return cOblNameAssignment_2; }
		
		//[Obl]
		public CrossReference getOblNameOblCrossReference_2_0() { return cOblNameOblCrossReference_2_0; }
		
		//ID
		public RuleCall getOblNameOblIDTerminalRuleCall_2_0_1() { return cOblNameOblIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OblEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.OblEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOTRIGGEREDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOACTIVATEDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOSUSPENDEDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cORESUMEDKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cODISCHARGEDKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOEXPIREDKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOFULFILLEDKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOVIOLATEDKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOTERMINATEDKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//OblEvent:
		//	'oTRIGGERED' | 'oACTIVATED' | 'oSUSPENDED' | 'oRESUMED' | 'oDISCHARGED'
		//	| 'oEXPIRED' | 'oFULFILLED' | 'oVIOLATED' | 'oTERMINATED';
		@Override public ParserRule getRule() { return rule; }
		
		//'oTRIGGERED' | 'oACTIVATED' | 'oSUSPENDED' | 'oRESUMED' | 'oDISCHARGED' | 'oEXPIRED' | 'oFULFILLED' | 'oVIOLATED' |
		//'oTERMINATED'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'oTRIGGERED'
		public Keyword getOTRIGGEREDKeyword_0() { return cOTRIGGEREDKeyword_0; }
		
		//'oACTIVATED'
		public Keyword getOACTIVATEDKeyword_1() { return cOACTIVATEDKeyword_1; }
		
		//'oSUSPENDED'
		public Keyword getOSUSPENDEDKeyword_2() { return cOSUSPENDEDKeyword_2; }
		
		//'oRESUMED'
		public Keyword getORESUMEDKeyword_3() { return cORESUMEDKeyword_3; }
		
		//'oDISCHARGED'
		public Keyword getODISCHARGEDKeyword_4() { return cODISCHARGEDKeyword_4; }
		
		//'oEXPIRED'
		public Keyword getOEXPIREDKeyword_5() { return cOEXPIREDKeyword_5; }
		
		//'oFULFILLED'
		public Keyword getOFULFILLEDKeyword_6() { return cOFULFILLEDKeyword_6; }
		
		//'oVIOLATED'
		public Keyword getOVIOLATEDKeyword_7() { return cOVIOLATEDKeyword_7; }
		
		//'oTERMINATED'
		public Keyword getOTERMINATEDKeyword_8() { return cOTERMINATEDKeyword_8; }
	}
	public class PointConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.PointConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeINTTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//PointConst:
		//	{PointConst} Type=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{PointConst} Type=INT
		public Group getGroup() { return cGroup; }
		
		//{PointConst}
		public Action getPointConstAction_0() { return cPointConstAction_0; }
		
		//Type=INT
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//INT
		public RuleCall getTypeINTTerminalRuleCall_1_0() { return cTypeINTTerminalRuleCall_1_0; }
	}
	public class OStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.oState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOblStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOblStateOblStateParserRuleCall_0_0 = (RuleCall)cOblStateAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOblNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOblNameOblCrossReference_2_0 = (CrossReference)cOblNameAssignment_2.eContents().get(0);
		private final RuleCall cOblNameOblIDTerminalRuleCall_2_0_1 = (RuleCall)cOblNameOblCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//oState:
		//	oblState=OblState '(' oblName=[Obl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//oblState=OblState '(' oblName=[Obl] ')'
		public Group getGroup() { return cGroup; }
		
		//oblState=OblState
		public Assignment getOblStateAssignment_0() { return cOblStateAssignment_0; }
		
		//OblState
		public RuleCall getOblStateOblStateParserRuleCall_0_0() { return cOblStateOblStateParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//oblName=[Obl]
		public Assignment getOblNameAssignment_2() { return cOblNameAssignment_2; }
		
		//[Obl]
		public CrossReference getOblNameOblCrossReference_2_0() { return cOblNameOblCrossReference_2_0; }
		
		//ID
		public RuleCall getOblNameOblIDTerminalRuleCall_2_0_1() { return cOblNameOblIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OblStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.OblState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOCREATEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOINEFFECTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOSUSPENSIONKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cOSUCCESSFUL_TERMINATIONKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOUNSUCCESSFUL_TERMINATIONKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOVIOLATIONKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOFULFILLMENTKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cODISCHARGEKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//OblState:
		//	'oCREATE' | 'oINEFFECT' | 'oSUSPENSION' | 'oSUCCESSFUL_TERMINATION'
		//	| 'oUNSUCCESSFUL_TERMINATION' | 'oVIOLATION' | 'oFULFILLMENT' | 'oDISCHARGE';
		@Override public ParserRule getRule() { return rule; }
		
		//'oCREATE' | 'oINEFFECT' | 'oSUSPENSION' | 'oSUCCESSFUL_TERMINATION' | 'oUNSUCCESSFUL_TERMINATION' | 'oVIOLATION' |
		//'oFULFILLMENT' | 'oDISCHARGE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'oCREATE'
		public Keyword getOCREATEKeyword_0() { return cOCREATEKeyword_0; }
		
		//'oINEFFECT'
		public Keyword getOINEFFECTKeyword_1() { return cOINEFFECTKeyword_1; }
		
		//'oSUSPENSION'
		public Keyword getOSUSPENSIONKeyword_2() { return cOSUSPENSIONKeyword_2; }
		
		//'oSUCCESSFUL_TERMINATION'
		public Keyword getOSUCCESSFUL_TERMINATIONKeyword_3() { return cOSUCCESSFUL_TERMINATIONKeyword_3; }
		
		//'oUNSUCCESSFUL_TERMINATION'
		public Keyword getOUNSUCCESSFUL_TERMINATIONKeyword_4() { return cOUNSUCCESSFUL_TERMINATIONKeyword_4; }
		
		//'oVIOLATION'
		public Keyword getOVIOLATIONKeyword_5() { return cOVIOLATIONKeyword_5; }
		
		//'oFULFILLMENT'
		public Keyword getOFULFILLMENTKeyword_6() { return cOFULFILLMENTKeyword_6; }
		
		//'oDISCHARGE'
		public Keyword getODISCHARGEKeyword_7() { return cODISCHARGEKeyword_7; }
	}
	public class CStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.cState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContrStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContrStateContrStateParserRuleCall_0_0 = (RuleCall)cContrStateAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContractNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContractNameContractCrossReference_2_0 = (CrossReference)cContractNameAssignment_2.eContents().get(0);
		private final RuleCall cContractNameContractIDTerminalRuleCall_2_0_1 = (RuleCall)cContractNameContractCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//cState:
		//	contrState=ContrState '(' contractName=[Contract] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//contrState=ContrState '(' contractName=[Contract] ')'
		public Group getGroup() { return cGroup; }
		
		//contrState=ContrState
		public Assignment getContrStateAssignment_0() { return cContrStateAssignment_0; }
		
		//ContrState
		public RuleCall getContrStateContrStateParserRuleCall_0_0() { return cContrStateContrStateParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//contractName=[Contract]
		public Assignment getContractNameAssignment_2() { return cContractNameAssignment_2; }
		
		//[Contract]
		public CrossReference getContractNameContractCrossReference_2_0() { return cContractNameContractCrossReference_2_0; }
		
		//ID
		public RuleCall getContractNameContractIDTerminalRuleCall_2_0_1() { return cContractNameContractIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ContrStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.ContrState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCFORMKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCINEFFECTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCSUSPENSIONKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCSUCCESSFUL_TERMINATIONKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCUNSECCESSFUL_TERMINATIONKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCUNASSIGNKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ContrState:
		//	'cFORM' | 'cINEFFECT' | 'cSUSPENSION' | 'cSUCCESSFUL_TERMINATION'
		//	| 'cUNSECCESSFUL_TERMINATION' | 'cUNASSIGN';
		@Override public ParserRule getRule() { return rule; }
		
		//'cFORM' | 'cINEFFECT' | 'cSUSPENSION' | 'cSUCCESSFUL_TERMINATION' | 'cUNSECCESSFUL_TERMINATION' | 'cUNASSIGN'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'cFORM'
		public Keyword getCFORMKeyword_0() { return cCFORMKeyword_0; }
		
		//'cINEFFECT'
		public Keyword getCINEFFECTKeyword_1() { return cCINEFFECTKeyword_1; }
		
		//'cSUSPENSION'
		public Keyword getCSUSPENSIONKeyword_2() { return cCSUSPENSIONKeyword_2; }
		
		//'cSUCCESSFUL_TERMINATION'
		public Keyword getCSUCCESSFUL_TERMINATIONKeyword_3() { return cCSUCCESSFUL_TERMINATIONKeyword_3; }
		
		//'cUNSECCESSFUL_TERMINATION'
		public Keyword getCUNSECCESSFUL_TERMINATIONKeyword_4() { return cCUNSECCESSFUL_TERMINATIONKeyword_4; }
		
		//'cUNASSIGN'
		public Keyword getCUNASSIGNKeyword_5() { return cCUNASSIGNKeyword_5; }
	}
	public class PowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.Pow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTriggerPropParserRuleCall_2_0_0 = (RuleCall)cTriggerAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cPKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRolesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRolesNameParserRuleCall_5_0 = (RuleCall)cRolesAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRolesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRolesNameParserRuleCall_7_0 = (RuleCall)cRolesAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAntecedentsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAntecedentsPropParserRuleCall_9_0 = (RuleCall)cAntecedentsAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cConsequentsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConsequentsPropParserRuleCall_11_0 = (RuleCall)cConsequentsAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Pow:
		//	name=ID ':' (trigger=Prop '->')? 'P' '(' roles+=Name ',' roles+=Name ','
		//	antecedents+=Prop ',' consequents+=Prop ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (trigger=Prop '->')? 'P' '(' roles+=Name ',' roles+=Name ',' antecedents+=Prop ',' consequents+=Prop ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(trigger=Prop '->')?
		public Group getGroup_2() { return cGroup_2; }
		
		//trigger=Prop
		public Assignment getTriggerAssignment_2_0() { return cTriggerAssignment_2_0; }
		
		//Prop
		public RuleCall getTriggerPropParserRuleCall_2_0_0() { return cTriggerPropParserRuleCall_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//'P'
		public Keyword getPKeyword_3() { return cPKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//roles+=Name
		public Assignment getRolesAssignment_5() { return cRolesAssignment_5; }
		
		//Name
		public RuleCall getRolesNameParserRuleCall_5_0() { return cRolesNameParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//roles+=Name
		public Assignment getRolesAssignment_7() { return cRolesAssignment_7; }
		
		//Name
		public RuleCall getRolesNameParserRuleCall_7_0() { return cRolesNameParserRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//antecedents+=Prop
		public Assignment getAntecedentsAssignment_9() { return cAntecedentsAssignment_9; }
		
		//Prop
		public RuleCall getAntecedentsPropParserRuleCall_9_0() { return cAntecedentsPropParserRuleCall_9_0; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//consequents+=Prop
		public Assignment getConsequentsAssignment_11() { return cConsequentsAssignment_11; }
		
		//Prop
		public RuleCall getConsequentsPropParserRuleCall_11_0() { return cConsequentsPropParserRuleCall_11_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class PStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.pState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPowStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPowStatePowStateParserRuleCall_0_0 = (RuleCall)cPowStateAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPowNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPowNamePowCrossReference_2_0 = (CrossReference)cPowNameAssignment_2.eContents().get(0);
		private final RuleCall cPowNamePowIDTerminalRuleCall_2_0_1 = (RuleCall)cPowNamePowCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//pState:
		//	powState=PowState '(' powName=[Pow] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//powState=PowState '(' powName=[Pow] ')'
		public Group getGroup() { return cGroup; }
		
		//powState=PowState
		public Assignment getPowStateAssignment_0() { return cPowStateAssignment_0; }
		
		//PowState
		public RuleCall getPowStatePowStateParserRuleCall_0_0() { return cPowStatePowStateParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//powName=[Pow]
		public Assignment getPowNameAssignment_2() { return cPowNameAssignment_2; }
		
		//[Pow]
		public CrossReference getPowNamePowCrossReference_2_0() { return cPowNamePowCrossReference_2_0; }
		
		//ID
		public RuleCall getPowNamePowIDTerminalRuleCall_2_0_1() { return cPowNamePowIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PowStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.PowState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPCREATEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPINEFFECTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPSUSPENSIONKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPSUCCESSFUL_TERMINATIONKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPUNSUCCESSFUL_TERMINATIONKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//PowState:
		//	'pCREATE' | 'pINEFFECT' | 'pSUSPENSION' | 'pSUCCESSFUL_TERMINATION'
		//	| 'pUNSUCCESSFUL_TERMINATION';
		@Override public ParserRule getRule() { return rule; }
		
		//'pCREATE' | 'pINEFFECT' | 'pSUSPENSION' | 'pSUCCESSFUL_TERMINATION' | 'pUNSUCCESSFUL_TERMINATION'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'pCREATE'
		public Keyword getPCREATEKeyword_0() { return cPCREATEKeyword_0; }
		
		//'pINEFFECT'
		public Keyword getPINEFFECTKeyword_1() { return cPINEFFECTKeyword_1; }
		
		//'pSUSPENSION'
		public Keyword getPSUSPENSIONKeyword_2() { return cPSUSPENSIONKeyword_2; }
		
		//'pSUCCESSFUL_TERMINATION'
		public Keyword getPSUCCESSFUL_TERMINATIONKeyword_3() { return cPSUCCESSFUL_TERMINATIONKeyword_3; }
		
		//'pUNSUCCESSFUL_TERMINATION'
		public Keyword getPUNSUCCESSFUL_TERMINATIONKeyword_4() { return cPUNSUCCESSFUL_TERMINATIONKeyword_4; }
	}
	public class SetExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symboleoide.Symboleoide.SetExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSelfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cObligationInstanceKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSelfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cPowerInstanceKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//SetExp:
		//	'self.' 'obligation.instance' | 'self.' 'power.instance';
		@Override public ParserRule getRule() { return rule; }
		
		//'self.' 'obligation.instance' | 'self.' 'power.instance'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'self.' 'obligation.instance'
		public Group getGroup_0() { return cGroup_0; }
		
		//'self.'
		public Keyword getSelfKeyword_0_0() { return cSelfKeyword_0_0; }
		
		//'obligation.instance'
		public Keyword getObligationInstanceKeyword_0_1() { return cObligationInstanceKeyword_0_1; }
		
		//'self.' 'power.instance'
		public Group getGroup_1() { return cGroup_1; }
		
		//'self.'
		public Keyword getSelfKeyword_1_0() { return cSelfKeyword_1_0; }
		
		//'power.instance'
		public Keyword getPowerInstanceKeyword_1_1() { return cPowerInstanceKeyword_1_1; }
	}
	
	
	private final ContractSpecElements pContractSpec;
	private final DomainSpecElements pDomainSpec;
	private final DConceptElements pDConcept;
	private final EnumItemElements pEnumItem;
	private final CTypeElements pCType;
	private final DomainTypeElements pDomainType;
	private final BasicTypeElements pBasicType;
	private final OntoCTypeElements pOntoCType;
	private final ContractElements pContract;
	private final AttElements pAtt;
	private final ParamElements pParam;
	private final DeclarElements pDeclar;
	private final DeclarPairElements pDeclarPair;
	private final PairElements pPair;
	private final TypeNameElements pTypeName;
	private final OblElements pObl;
	private final PropElements pProp;
	private final JuncElements pJunc;
	private final NegElements pNeg;
	private final AtomElements pAtom;
	private final SitPropElements pSitProp;
	private final EventPropElements pEventProp;
	private final MetaConstElements pMetaConst;
	private final IntervalElements pInterval;
	private final SitNameElements pSitName;
	private final UnitElements pUnit;
	private final IntConstElements pIntConst;
	private final TempOpElements pTempOp;
	private final PointElements pPoint;
	private final NameElements pName;
	private final PEventElements pPEvent;
	private final PowEventElements pPowEvent;
	private final CEventElements pCEvent;
	private final ContrEventElements pContrEvent;
	private final OEventElements pOEvent;
	private final OblEventElements pOblEvent;
	private final PointConstElements pPointConst;
	private final OStateElements pOState;
	private final OblStateElements pOblState;
	private final CStateElements pCState;
	private final ContrStateElements pContrState;
	private final PowElements pPow;
	private final PStateElements pPState;
	private final PowStateElements pPowState;
	private final SetExpElements pSetExp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SymboleoideGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContractSpec = new ContractSpecElements();
		this.pDomainSpec = new DomainSpecElements();
		this.pDConcept = new DConceptElements();
		this.pEnumItem = new EnumItemElements();
		this.pCType = new CTypeElements();
		this.pDomainType = new DomainTypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pOntoCType = new OntoCTypeElements();
		this.pContract = new ContractElements();
		this.pAtt = new AttElements();
		this.pParam = new ParamElements();
		this.pDeclar = new DeclarElements();
		this.pDeclarPair = new DeclarPairElements();
		this.pPair = new PairElements();
		this.pTypeName = new TypeNameElements();
		this.pObl = new OblElements();
		this.pProp = new PropElements();
		this.pJunc = new JuncElements();
		this.pNeg = new NegElements();
		this.pAtom = new AtomElements();
		this.pSitProp = new SitPropElements();
		this.pEventProp = new EventPropElements();
		this.pMetaConst = new MetaConstElements();
		this.pInterval = new IntervalElements();
		this.pSitName = new SitNameElements();
		this.pUnit = new UnitElements();
		this.pIntConst = new IntConstElements();
		this.pTempOp = new TempOpElements();
		this.pPoint = new PointElements();
		this.pName = new NameElements();
		this.pPEvent = new PEventElements();
		this.pPowEvent = new PowEventElements();
		this.pCEvent = new CEventElements();
		this.pContrEvent = new ContrEventElements();
		this.pOEvent = new OEventElements();
		this.pOblEvent = new OblEventElements();
		this.pPointConst = new PointConstElements();
		this.pOState = new OStateElements();
		this.pOblState = new OblStateElements();
		this.pCState = new CStateElements();
		this.pContrState = new ContrStateElements();
		this.pPow = new PowElements();
		this.pPState = new PStateElements();
		this.pPowState = new PowStateElements();
		this.pSetExp = new SetExpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("symboleoide.Symboleoide".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ContractSpec:
	//	domainSpecs+=DomainSpec contracts+=Contract;
	public ContractSpecElements getContractSpecAccess() {
		return pContractSpec;
	}
	
	public ParserRule getContractSpecRule() {
		return getContractSpecAccess().getRule();
	}
	
	//DomainSpec:
	//	'Domain' name=ID (dConcepts+=DConcept ';')+ ctypes+=CType? 'endDomain';
	public DomainSpecElements getDomainSpecAccess() {
		return pDomainSpec;
	}
	
	public ParserRule getDomainSpecRule() {
		return getDomainSpecAccess().getRule();
	}
	
	//DConcept:
	//	name=ID ('isA' conceptTypes+=CType) 'with'? (attributes+=Att ',')* attributes+=Att?
	//	| name=ID 'isA' 'Enumeration' '(' (enumerationItems+=enumItem ',')* enumerationItems+=enumItem ')';
	public DConceptElements getDConceptAccess() {
		return pDConcept;
	}
	
	public ParserRule getDConceptRule() {
		return getDConceptAccess().getRule();
	}
	
	//enumItem:
	//	{enumItem} name=ID;
	public EnumItemElements getEnumItemAccess() {
		return pEnumItem;
	}
	
	public ParserRule getEnumItemRule() {
		return getEnumItemAccess().getRule();
	}
	
	//CType:
	//	DomainType | {CType} OntoCType | {CType} BasicType;
	public CTypeElements getCTypeAccess() {
		return pCType;
	}
	
	public ParserRule getCTypeRule() {
		return getCTypeAccess().getRule();
	}
	
	//DomainType:
	//	dtypes+=[DConcept];
	public DomainTypeElements getDomainTypeAccess() {
		return pDomainType;
	}
	
	public ParserRule getDomainTypeRule() {
		return getDomainTypeAccess().getRule();
	}
	
	//BasicType:
	//	'NUMBER' | 'STRING' | 'DATE';
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//OntoCType:
	//	'ASSET' | 'EVENT' | 'ROLE' | 'SITUATION' | 'CONTRACT';
	public OntoCTypeElements getOntoCTypeAccess() {
		return pOntoCType;
	}
	
	public ParserRule getOntoCTypeRule() {
		return getOntoCTypeAccess().getRule();
	}
	
	//Contract:
	//	'Contract' name=ID '(' (parameters+=Param ',')+ parameters+=Param ')' ('Declarations' (declarations+=Declar ';')*)?
	//	('Preconditions' (propositions+=Prop ';')*)? ('Postconditions' (propositions+=Prop ';')*)?
	//	'Obligations' (obligations+=Obl ';')+ ('SurvivingObls' (obligations+=Obl ';')*)? ('Powers' (powers+=Pow ';')*)?
	//	('Constraints' (propositions+=Prop ';')*)?
	//	'endContract';
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//Att:
	//	Pair;
	public AttElements getAttAccess() {
		return pAtt;
	}
	
	public ParserRule getAttRule() {
		return getAttAccess().getRule();
	}
	
	//Param:
	//	DeclarPair;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//Declar:
	//	DeclarPair 'with' (names+=Name ':=' names+=Name ',')* (names+=Name ':=' names+=Name);
	public DeclarElements getDeclarAccess() {
		return pDeclar;
	}
	
	public ParserRule getDeclarRule() {
		return getDeclarAccess().getRule();
	}
	
	//DeclarPair:
	//	name=ID ':' typeNames+=TypeName;
	public DeclarPairElements getDeclarPairAccess() {
		return pDeclarPair;
	}
	
	public ParserRule getDeclarPairRule() {
		return getDeclarPairAccess().getRule();
	}
	
	//Pair:
	//	name=ID ':' types+=CType;
	public PairElements getPairAccess() {
		return pPair;
	}
	
	public ParserRule getPairRule() {
		return getPairAccess().getRule();
	}
	
	//TypeName:
	//	name=ID | {TypeName} BasicType;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//Obl:
	//	name=ID ':' (trigger=Prop '->')? 'O' '(' roles+=Name ',' roles+=Name ','
	//	antecedent=Prop ',' consequent=Prop ')';
	public OblElements getOblAccess() {
		return pObl;
	}
	
	public ParserRule getOblRule() {
		return getOblAccess().getRule();
	}
	
	//Prop:
	//	junctions+=Junc ('OR' junctions+=Junc)*;
	public PropElements getPropAccess() {
		return pProp;
	}
	
	public ParserRule getPropRule() {
		return getPropAccess().getRule();
	}
	
	//Junc:
	//	negativeAtoms+=Neg ('AND' negativeAtoms+=Neg)*;
	public JuncElements getJuncAccess() {
		return pJunc;
	}
	
	public ParserRule getJuncRule() {
		return getJuncAccess().getRule();
	}
	
	//Neg:
	//	'NOT'? atomicExpressions+=Atom;
	public NegElements getNegAccess() {
		return pNeg;
	}
	
	public ParserRule getNegRule() {
		return getNegAccess().getRule();
	}
	
	//Atom:
	//	eventPropositions+=EventProp
	//	| situationPropositions+=SitProp
	//	| shortHandNames+=Name '(' (names+=Name ',')* names+=Name (',' points+=Point)* (',' intervals+=Interval)* ')'
	//	| points+=Point 'within' intervals+=Interval
	//	| '(' propositions+=Prop ')'
	//	| 'exists' varName+=Name '|' setExps+=SetExp '(' metaconstraints+=MetaConst ')'
	//	| 'forAll' varName+=Name '|' setExps+=SetExp '(' metaconstraints+=MetaConst ')'
	//	| {Atom} 'TRUE' | {Atom} 'FALSE';
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//SitProp:
	//	'occurs' '(' situationName=[Name] ',' intervals+=Interval ')'
	//	| 'occurs' '(' oSituationName=oState ',' intervals+=Interval ')'
	//	| 'occurs' '(' cSituationName=cState ',' intervals+=Interval ')'
	//	| 'occurs' '(' pSituationName=pState ',' intervals+=Interval ')';
	public SitPropElements getSitPropAccess() {
		return pSitProp;
	}
	
	public ParserRule getSitPropRule() {
		return getSitPropAccess().getRule();
	}
	
	//EventProp:
	//	'happens' '(' eventName=[Declar] ',' points+=Point ')'
	//	| 'happens' '(' oEventName=oEvent ',' points+=Point ')'
	//	| 'happens' '(' cEventName=cEvent ',' points+=Point ')'
	//	| 'happens' '(' pEventName=pEvent ',' points+=Point ')';
	public EventPropElements getEventPropAccess() {
		return pEventProp;
	}
	
	public ParserRule getEventPropRule() {
		return getEventPropAccess().getRule();
	}
	
	//MetaConst:
	//	'CannotBeAssigned';
	public MetaConstElements getMetaConstAccess() {
		return pMetaConst;
	}
	
	public ParserRule getMetaConstRule() {
		return getMetaConstAccess().getRule();
	}
	
	//Interval:
	//	situationName=SitName | '[' points+=Point ',' points+=Point ']'
	//	| {Interval} 'UNNAMED_INTERVAL'
	//	| situationNames+=SitName tempOps+=TempOp intConsts+=IntConst units+=Unit | intConsts+=IntConst units+=Unit
	//	tempOps+=TempOp situationNames+=SitName;
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}
	
	//SitName:
	//	SitName+=Name | oStates+=oState | pStates+=pState | cStates+=cState
	//	| oEvents+=oEvent | cEvents+=cEvent | pEvents+=pEvent;
	public SitNameElements getSitNameAccess() {
		return pSitName;
	}
	
	public ParserRule getSitNameRule() {
		return getSitNameAccess().getRule();
	}
	
	//Unit:
	//	'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'QUARTERS'
	//	| 'YEARS';
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//IntConst:
	//	{IntConst} Type=INT;
	public IntConstElements getIntConstAccess() {
		return pIntConst;
	}
	
	public ParserRule getIntConstRule() {
		return getIntConstAccess().getRule();
	}
	
	//TempOp:
	//	'BEFORE' | 'AFTER' | 'AT' | 'WITHIN' | '+' | '-';
	public TempOpElements getTempOpAccess() {
		return pTempOp;
	}
	
	public ParserRule getTempOpRule() {
		return getTempOpAccess().getRule();
	}
	
	//Point:
	//	eventNames+=SitName | {Point} 'UNNAMED_POINT' | pointConsts+=PointConst | pointConsts+=PointConst units+=Unit
	//	tempOps+=TempOp eventNames+=SitName | eventNames+=SitName tempOps+=TempOp pointConsts+=PointConst units+=Unit;
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//Name:
	//	name=ID;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//pEvent:
	//	powEvent=PowEvent '(' powName=[Pow] ')';
	public PEventElements getPEventAccess() {
		return pPEvent;
	}
	
	public ParserRule getPEventRule() {
		return getPEventAccess().getRule();
	}
	
	//PowEvent:
	//	'pTRIGGERED' | 'pACTIVATED' | 'pSUSPENDED' | 'pRESUMED' | 'pEXERTED'
	//	| 'pEXPIRED' | 'pTERMINATED';
	public PowEventElements getPowEventAccess() {
		return pPowEvent;
	}
	
	public ParserRule getPowEventRule() {
		return getPowEventAccess().getRule();
	}
	
	//cEvent:
	//	contrEvent=ContrEvent '(' contrName=[Contract] ')';
	public CEventElements getCEventAccess() {
		return pCEvent;
	}
	
	public ParserRule getCEventRule() {
		return getCEventAccess().getRule();
	}
	
	//ContrEvent:
	//	'cACTIVATED' | 'cSUSPENDED' | 'cRESUMED' | 'cFULFILLED_ACTIVE_OBLS'
	//	| 'cREVOKED_PARTY' | 'cASSIGNED_PARTY' | 'cTERMINATED';
	public ContrEventElements getContrEventAccess() {
		return pContrEvent;
	}
	
	public ParserRule getContrEventRule() {
		return getContrEventAccess().getRule();
	}
	
	//oEvent:
	//	oblEvent=OblEvent '(' oblName=[Obl] ')';
	public OEventElements getOEventAccess() {
		return pOEvent;
	}
	
	public ParserRule getOEventRule() {
		return getOEventAccess().getRule();
	}
	
	//OblEvent:
	//	'oTRIGGERED' | 'oACTIVATED' | 'oSUSPENDED' | 'oRESUMED' | 'oDISCHARGED'
	//	| 'oEXPIRED' | 'oFULFILLED' | 'oVIOLATED' | 'oTERMINATED';
	public OblEventElements getOblEventAccess() {
		return pOblEvent;
	}
	
	public ParserRule getOblEventRule() {
		return getOblEventAccess().getRule();
	}
	
	//PointConst:
	//	{PointConst} Type=INT;
	public PointConstElements getPointConstAccess() {
		return pPointConst;
	}
	
	public ParserRule getPointConstRule() {
		return getPointConstAccess().getRule();
	}
	
	//oState:
	//	oblState=OblState '(' oblName=[Obl] ')';
	public OStateElements getOStateAccess() {
		return pOState;
	}
	
	public ParserRule getOStateRule() {
		return getOStateAccess().getRule();
	}
	
	//OblState:
	//	'oCREATE' | 'oINEFFECT' | 'oSUSPENSION' | 'oSUCCESSFUL_TERMINATION'
	//	| 'oUNSUCCESSFUL_TERMINATION' | 'oVIOLATION' | 'oFULFILLMENT' | 'oDISCHARGE';
	public OblStateElements getOblStateAccess() {
		return pOblState;
	}
	
	public ParserRule getOblStateRule() {
		return getOblStateAccess().getRule();
	}
	
	//cState:
	//	contrState=ContrState '(' contractName=[Contract] ')';
	public CStateElements getCStateAccess() {
		return pCState;
	}
	
	public ParserRule getCStateRule() {
		return getCStateAccess().getRule();
	}
	
	//ContrState:
	//	'cFORM' | 'cINEFFECT' | 'cSUSPENSION' | 'cSUCCESSFUL_TERMINATION'
	//	| 'cUNSECCESSFUL_TERMINATION' | 'cUNASSIGN';
	public ContrStateElements getContrStateAccess() {
		return pContrState;
	}
	
	public ParserRule getContrStateRule() {
		return getContrStateAccess().getRule();
	}
	
	//Pow:
	//	name=ID ':' (trigger=Prop '->')? 'P' '(' roles+=Name ',' roles+=Name ','
	//	antecedents+=Prop ',' consequents+=Prop ')';
	public PowElements getPowAccess() {
		return pPow;
	}
	
	public ParserRule getPowRule() {
		return getPowAccess().getRule();
	}
	
	//pState:
	//	powState=PowState '(' powName=[Pow] ')';
	public PStateElements getPStateAccess() {
		return pPState;
	}
	
	public ParserRule getPStateRule() {
		return getPStateAccess().getRule();
	}
	
	//PowState:
	//	'pCREATE' | 'pINEFFECT' | 'pSUSPENSION' | 'pSUCCESSFUL_TERMINATION'
	//	| 'pUNSUCCESSFUL_TERMINATION';
	public PowStateElements getPowStateAccess() {
		return pPowState;
	}
	
	public ParserRule getPowStateRule() {
		return getPowStateAccess().getRule();
	}
	
	//SetExp:
	//	'self.' 'obligation.instance' | 'self.' 'power.instance';
	public SetExpElements getSetExpAccess() {
		return pSetExp;
	}
	
	public ParserRule getSetExpRule() {
		return getSetExpAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
