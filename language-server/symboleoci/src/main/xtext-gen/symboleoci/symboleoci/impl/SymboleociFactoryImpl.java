/**
 * generated by Xtext 2.22.0
 */
package symboleoci.symboleoci.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import symboleoci.symboleoci.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SymboleociFactoryImpl extends EFactoryImpl implements SymboleociFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SymboleociFactory init()
  {
    try
    {
      SymboleociFactory theSymboleociFactory = (SymboleociFactory)EPackage.Registry.INSTANCE.getEFactory(SymboleociPackage.eNS_URI);
      if (theSymboleociFactory != null)
      {
        return theSymboleociFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SymboleociFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SymboleociFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SymboleociPackage.CONTRACT_SPEC: return createContractSpec();
      case SymboleociPackage.DOMAIN_SPEC: return createDomainSpec();
      case SymboleociPackage.DCONCEPT: return createDConcept();
      case SymboleociPackage.ENUM_ITEM: return createenumItem();
      case SymboleociPackage.CTYPE: return createCType();
      case SymboleociPackage.DOMAIN_TYPE: return createDomainType();
      case SymboleociPackage.CONTRACT: return createContract();
      case SymboleociPackage.ATT: return createAtt();
      case SymboleociPackage.PARAM: return createParam();
      case SymboleociPackage.DECLAR: return createDeclar();
      case SymboleociPackage.DECLAR_PAIR: return createDeclarPair();
      case SymboleociPackage.PAIR: return createPair();
      case SymboleociPackage.TYPE_NAME: return createTypeName();
      case SymboleociPackage.OBL: return createObl();
      case SymboleociPackage.PROP: return createProp();
      case SymboleociPackage.JUNC: return createJunc();
      case SymboleociPackage.NEG: return createNeg();
      case SymboleociPackage.ATOM: return createAtom();
      case SymboleociPackage.SIT_PROP: return createSitProp();
      case SymboleociPackage.EVENT_PROP: return createEventProp();
      case SymboleociPackage.INTERVAL: return createInterval();
      case SymboleociPackage.SIT_NAME: return createSitName();
      case SymboleociPackage.INT_CONST: return createIntConst();
      case SymboleociPackage.POINT: return createPoint();
      case SymboleociPackage.NAME: return createName();
      case SymboleociPackage.PEVENT: return createpEvent();
      case SymboleociPackage.CEVENT: return createcEvent();
      case SymboleociPackage.OEVENT: return createoEvent();
      case SymboleociPackage.POINT_CONST: return createPointConst();
      case SymboleociPackage.OSTATE: return createoState();
      case SymboleociPackage.CSTATE: return createcState();
      case SymboleociPackage.POW: return createPow();
      case SymboleociPackage.PSTATE: return createpState();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContractSpec createContractSpec()
  {
    ContractSpecImpl contractSpec = new ContractSpecImpl();
    return contractSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainSpec createDomainSpec()
  {
    DomainSpecImpl domainSpec = new DomainSpecImpl();
    return domainSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DConcept createDConcept()
  {
    DConceptImpl dConcept = new DConceptImpl();
    return dConcept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public enumItem createenumItem()
  {
    enumItemImpl enumItem = new enumItemImpl();
    return enumItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CType createCType()
  {
    CTypeImpl cType = new CTypeImpl();
    return cType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainType createDomainType()
  {
    DomainTypeImpl domainType = new DomainTypeImpl();
    return domainType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contract createContract()
  {
    ContractImpl contract = new ContractImpl();
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Att createAtt()
  {
    AttImpl att = new AttImpl();
    return att;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Param createParam()
  {
    ParamImpl param = new ParamImpl();
    return param;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declar createDeclar()
  {
    DeclarImpl declar = new DeclarImpl();
    return declar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclarPair createDeclarPair()
  {
    DeclarPairImpl declarPair = new DeclarPairImpl();
    return declarPair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pair createPair()
  {
    PairImpl pair = new PairImpl();
    return pair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeName createTypeName()
  {
    TypeNameImpl typeName = new TypeNameImpl();
    return typeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Obl createObl()
  {
    OblImpl obl = new OblImpl();
    return obl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Prop createProp()
  {
    PropImpl prop = new PropImpl();
    return prop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Junc createJunc()
  {
    JuncImpl junc = new JuncImpl();
    return junc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Neg createNeg()
  {
    NegImpl neg = new NegImpl();
    return neg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Atom createAtom()
  {
    AtomImpl atom = new AtomImpl();
    return atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SitProp createSitProp()
  {
    SitPropImpl sitProp = new SitPropImpl();
    return sitProp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventProp createEventProp()
  {
    EventPropImpl eventProp = new EventPropImpl();
    return eventProp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interval createInterval()
  {
    IntervalImpl interval = new IntervalImpl();
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SitName createSitName()
  {
    SitNameImpl sitName = new SitNameImpl();
    return sitName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntConst createIntConst()
  {
    IntConstImpl intConst = new IntConstImpl();
    return intConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Point createPoint()
  {
    PointImpl point = new PointImpl();
    return point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Name createName()
  {
    NameImpl name = new NameImpl();
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public pEvent createpEvent()
  {
    pEventImpl pEvent = new pEventImpl();
    return pEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public cEvent createcEvent()
  {
    cEventImpl cEvent = new cEventImpl();
    return cEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public oEvent createoEvent()
  {
    oEventImpl oEvent = new oEventImpl();
    return oEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PointConst createPointConst()
  {
    PointConstImpl pointConst = new PointConstImpl();
    return pointConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public oState createoState()
  {
    oStateImpl oState = new oStateImpl();
    return oState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public cState createcState()
  {
    cStateImpl cState = new cStateImpl();
    return cState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pow createPow()
  {
    PowImpl pow = new PowImpl();
    return pow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public pState createpState()
  {
    pStateImpl pState = new pStateImpl();
    return pState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SymboleociPackage getSymboleociPackage()
  {
    return (SymboleociPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SymboleociPackage getPackage()
  {
    return SymboleociPackage.eINSTANCE;
  }

} //SymboleociFactoryImpl
