/**
 * generated by Xtext 2.22.0
 */
package symboleoci.symboleoci.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import symboleoci.symboleoci.Point;
import symboleoci.symboleoci.PointConst;
import symboleoci.symboleoci.SitName;
import symboleoci.symboleoci.SymboleociPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Point</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link symboleoci.symboleoci.impl.PointImpl#getEventNames <em>Event Names</em>}</li>
 *   <li>{@link symboleoci.symboleoci.impl.PointImpl#getPointConsts <em>Point Consts</em>}</li>
 *   <li>{@link symboleoci.symboleoci.impl.PointImpl#getUnits <em>Units</em>}</li>
 *   <li>{@link symboleoci.symboleoci.impl.PointImpl#getTempOps <em>Temp Ops</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PointImpl extends MinimalEObjectImpl.Container implements Point
{
  /**
   * The cached value of the '{@link #getEventNames() <em>Event Names</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventNames()
   * @generated
   * @ordered
   */
  protected EList<SitName> eventNames;

  /**
   * The cached value of the '{@link #getPointConsts() <em>Point Consts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPointConsts()
   * @generated
   * @ordered
   */
  protected EList<PointConst> pointConsts;

  /**
   * The cached value of the '{@link #getUnits() <em>Units</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnits()
   * @generated
   * @ordered
   */
  protected EList<String> units;

  /**
   * The cached value of the '{@link #getTempOps() <em>Temp Ops</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTempOps()
   * @generated
   * @ordered
   */
  protected EList<String> tempOps;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PointImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SymboleociPackage.Literals.POINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SitName> getEventNames()
  {
    if (eventNames == null)
    {
      eventNames = new EObjectContainmentEList<SitName>(SitName.class, this, SymboleociPackage.POINT__EVENT_NAMES);
    }
    return eventNames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PointConst> getPointConsts()
  {
    if (pointConsts == null)
    {
      pointConsts = new EObjectContainmentEList<PointConst>(PointConst.class, this, SymboleociPackage.POINT__POINT_CONSTS);
    }
    return pointConsts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getUnits()
  {
    if (units == null)
    {
      units = new EDataTypeEList<String>(String.class, this, SymboleociPackage.POINT__UNITS);
    }
    return units;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getTempOps()
  {
    if (tempOps == null)
    {
      tempOps = new EDataTypeEList<String>(String.class, this, SymboleociPackage.POINT__TEMP_OPS);
    }
    return tempOps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SymboleociPackage.POINT__EVENT_NAMES:
        return ((InternalEList<?>)getEventNames()).basicRemove(otherEnd, msgs);
      case SymboleociPackage.POINT__POINT_CONSTS:
        return ((InternalEList<?>)getPointConsts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SymboleociPackage.POINT__EVENT_NAMES:
        return getEventNames();
      case SymboleociPackage.POINT__POINT_CONSTS:
        return getPointConsts();
      case SymboleociPackage.POINT__UNITS:
        return getUnits();
      case SymboleociPackage.POINT__TEMP_OPS:
        return getTempOps();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SymboleociPackage.POINT__EVENT_NAMES:
        getEventNames().clear();
        getEventNames().addAll((Collection<? extends SitName>)newValue);
        return;
      case SymboleociPackage.POINT__POINT_CONSTS:
        getPointConsts().clear();
        getPointConsts().addAll((Collection<? extends PointConst>)newValue);
        return;
      case SymboleociPackage.POINT__UNITS:
        getUnits().clear();
        getUnits().addAll((Collection<? extends String>)newValue);
        return;
      case SymboleociPackage.POINT__TEMP_OPS:
        getTempOps().clear();
        getTempOps().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SymboleociPackage.POINT__EVENT_NAMES:
        getEventNames().clear();
        return;
      case SymboleociPackage.POINT__POINT_CONSTS:
        getPointConsts().clear();
        return;
      case SymboleociPackage.POINT__UNITS:
        getUnits().clear();
        return;
      case SymboleociPackage.POINT__TEMP_OPS:
        getTempOps().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SymboleociPackage.POINT__EVENT_NAMES:
        return eventNames != null && !eventNames.isEmpty();
      case SymboleociPackage.POINT__POINT_CONSTS:
        return pointConsts != null && !pointConsts.isEmpty();
      case SymboleociPackage.POINT__UNITS:
        return units != null && !units.isEmpty();
      case SymboleociPackage.POINT__TEMP_OPS:
        return tempOps != null && !tempOps.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (units: ");
    result.append(units);
    result.append(", tempOps: ");
    result.append(tempOps);
    result.append(')');
    return result.toString();
  }

} //PointImpl
