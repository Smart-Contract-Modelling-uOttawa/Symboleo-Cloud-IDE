/**
 * generated by Xtext 2.22.0
 */
package symboleoci.symboleoci.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import symboleoci.symboleoci.CType;
import symboleoci.symboleoci.DConcept;
import symboleoci.symboleoci.DomainSpec;
import symboleoci.symboleoci.SymboleociPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Domain Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link symboleoci.symboleoci.impl.DomainSpecImpl#getName <em>Name</em>}</li>
 *   <li>{@link symboleoci.symboleoci.impl.DomainSpecImpl#getDConcepts <em>DConcepts</em>}</li>
 *   <li>{@link symboleoci.symboleoci.impl.DomainSpecImpl#getCtypes <em>Ctypes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DomainSpecImpl extends MinimalEObjectImpl.Container implements DomainSpec
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getDConcepts() <em>DConcepts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDConcepts()
   * @generated
   * @ordered
   */
  protected EList<DConcept> dConcepts;

  /**
   * The cached value of the '{@link #getCtypes() <em>Ctypes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCtypes()
   * @generated
   * @ordered
   */
  protected EList<CType> ctypes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SymboleociPackage.Literals.DOMAIN_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleociPackage.DOMAIN_SPEC__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DConcept> getDConcepts()
  {
    if (dConcepts == null)
    {
      dConcepts = new EObjectContainmentEList<DConcept>(DConcept.class, this, SymboleociPackage.DOMAIN_SPEC__DCONCEPTS);
    }
    return dConcepts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CType> getCtypes()
  {
    if (ctypes == null)
    {
      ctypes = new EObjectContainmentEList<CType>(CType.class, this, SymboleociPackage.DOMAIN_SPEC__CTYPES);
    }
    return ctypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SymboleociPackage.DOMAIN_SPEC__DCONCEPTS:
        return ((InternalEList<?>)getDConcepts()).basicRemove(otherEnd, msgs);
      case SymboleociPackage.DOMAIN_SPEC__CTYPES:
        return ((InternalEList<?>)getCtypes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SymboleociPackage.DOMAIN_SPEC__NAME:
        return getName();
      case SymboleociPackage.DOMAIN_SPEC__DCONCEPTS:
        return getDConcepts();
      case SymboleociPackage.DOMAIN_SPEC__CTYPES:
        return getCtypes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SymboleociPackage.DOMAIN_SPEC__NAME:
        setName((String)newValue);
        return;
      case SymboleociPackage.DOMAIN_SPEC__DCONCEPTS:
        getDConcepts().clear();
        getDConcepts().addAll((Collection<? extends DConcept>)newValue);
        return;
      case SymboleociPackage.DOMAIN_SPEC__CTYPES:
        getCtypes().clear();
        getCtypes().addAll((Collection<? extends CType>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SymboleociPackage.DOMAIN_SPEC__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SymboleociPackage.DOMAIN_SPEC__DCONCEPTS:
        getDConcepts().clear();
        return;
      case SymboleociPackage.DOMAIN_SPEC__CTYPES:
        getCtypes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SymboleociPackage.DOMAIN_SPEC__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SymboleociPackage.DOMAIN_SPEC__DCONCEPTS:
        return dConcepts != null && !dConcepts.isEmpty();
      case SymboleociPackage.DOMAIN_SPEC__CTYPES:
        return ctypes != null && !ctypes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //DomainSpecImpl
